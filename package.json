{
  "name": "running-app-mvp",
  "version": "1.0.0",
  "description": "Running tracker web app MVP",
  "main": "server.js",
  "type": "module",
  "engines": {
    "node": ">=20.0.0",
    "npm": ">=10.0.0"
  },
  "scripts": {
    "dev": "tsx watch server.ts",
    "dev:frontend": "vite",
    "dev:full": "concurrently \"npm run dev\" \"npm run dev:frontend\"",
    "setup": "npm install && npx prisma migrate dev --name init && npx prisma generate",
    "setup:hooks": "tsx scripts/setup-hooks.ts",
    "prepare": "husky",
    "build": "vite build",
    "build:analyze": "npm run build && npm run bundle:check",
    "bundle:check": "node scripts/bundle-size-check.mjs",
    "bundle:check:ci": "npm run build && npm run bundle:check",
    "start": "node dist/server.js",
    "preview": "vite preview",
    "lint": "eslint . --ext .ts,.tsx,.js,.jsx",
    "lint:fix": "eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "lint:server": "eslint server.ts server/**/* --ext .ts,.tsx,.js,.jsx",
    "lint:frontend": "eslint src/**/* --ext .ts,.tsx,.js,.jsx",
    "lint:check": "npm run lint && npm run format:check && npm run typecheck",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "typecheck": "npx tsc --noEmit",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate dev",
    "prisma:studio": "prisma studio",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:run": "vitest run",
    "test:watch": "vitest --watch",
    "test:integration": "node scripts/run-integration-tests.mjs",
    "test:integration:ci": "NODE_OPTIONS=--experimental-vm-modules jest --config jest.config.ci.js --forceExit --detectOpenHandles",
    "test:integration:direct": "NODE_OPTIONS=--experimental-vm-modules jest --config jest.config.js",
    "test:integration:watch": "cross-env NODE_OPTIONS=--experimental-vm-modules jest --watch",
    "test:conflicts": "tsx scripts/detect-test-data-conflicts.ts",
    "test:conflicts:fix": "tsx scripts/detect-test-data-conflicts.ts && npm run test:integration",
    "test:setup": "npx playwright install && tsx scripts/setup-test-db.ts",
    "test:setup:db": "tsx scripts/setup-test-db.ts",
    "test:setup:prisma": "tsx tests/setup/prismaSetup.ts",
    "test:verify:prisma": "tsx tests/setup/prismaSetup.ts verify",
    "test:ensure-ready": "tsx scripts/ensure-test-readiness.ts full",
    "test:ensure-ready:quick": "tsx scripts/ensure-test-readiness.ts quick",
    "validate-test-env": "tsx scripts/validate-test-env.ts",
    "validate-migrations": "tsx scripts/validate-migrations.ts",
    "validate-migrations:verbose": "tsx scripts/validate-migrations.ts --verbose",
    "verify-schema": "npx prisma migrate status && npx prisma validate",
    "ensure-migrations": "tsx scripts/ensure-migrations.ts",
    "ensure-migrations:verbose": "tsx scripts/ensure-migrations.ts --verbose",
    "create-test-user": "tsx scripts/create-test-user.ts",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "test:e2e:headed": "playwright test --headed",
    "test:coverage": "vitest run --coverage",
    "test:coverage:integration": "cross-env NODE_OPTIONS=--experimental-vm-modules jest --config jest.config.js --coverage --coverageDirectory=coverage-integration",
    "test:coverage:all": "npm run test:coverage && npm run test:coverage:integration",
    "test:coverage:report": "node tests/coverage/coverage-report.cjs",
    "test:coverage:open": "npm run test:coverage && open coverage/index.html",
    "test:coverage:ci": "npm run test:coverage:all && npm run test:coverage:report",
    "test:coverage:unit:ci": "npm run test:setup:prisma && vitest run --config=vitest.config.ci.ts --coverage --reporter=junit --reporter=default",
    "test:coverage:integration:ci": "npm run ensure-migrations && npm run test:setup:prisma && cross-env NODE_OPTIONS=--experimental-vm-modules jest --config jest.config.ci.js --coverage --coverageDirectory=coverage-integration",
    "test:e2e:ci": "npm run test:setup:prisma && playwright test --config=playwright.config.ci.ts",
    "ci-db-setup": "npm run ensure-migrations && npm run test:setup:prisma && npx prisma migrate deploy && npm run verify-schema",
    "ci-integration-db-setup": "npm run ensure-migrations && npm run test:setup:prisma && npm run verify-schema",
    "ci-db-teardown": "rm -f prisma/test.db prisma/test.db-journal",
    "ci-integration-db-teardown": "rm -f prisma/test.db prisma/test.db-journal",
    "test:coverage:quality": "node tests/coverage/coverage-quality.cjs",
    "test:coverage:badges": "node tests/coverage/generate-badges.cjs",
    "test:performance": "node tests/performance/benchmark.mjs",
    "test:lighthouse": "npx @lhci/cli autorun",
    "test:lighthouse:ci": "npx @lhci/cli autorun --config=lighthouserc.ci.json",
    "wait-for-server": "tsx scripts/wait-for-server.ts",
    "wait-for-server:verbose": "tsx scripts/wait-for-server.ts --verbose",
    "test:performance:full": "npm run test:performance && npm run build && npm run wait-for-server && npm run test:lighthouse",
    "test:performance:ci": "tsx scripts/performance-ci.ts",
    "test:performance:ci:legacy": "npm run test:performance && npm run build && npm run wait-for-server && npm run test:lighthouse:ci",
    "test:bundle-size": "node scripts/bundle-size-check.mjs",
    "test:performance:basic": "npm run test:performance && npm run build && npm run test:bundle-size",
    "test:memory": "node --expose-gc tests/memory/memory-check.mjs",
    "test:a11y:ci": "npm run test:setup:prisma && npm run test:a11y && playwright test tests/e2e/accessibility.test.ts --reporter=html",
    "test:coverage:check": "node tests/coverage/coverage-quality.cjs --ci",
    "test:a11y": "vitest run tests/unit/accessibility",
    "test:a11y:watch": "vitest watch tests/unit/accessibility",
    "test:a11y:e2e": "playwright test tests/e2e/accessibility.test.ts",
    "test:a11y:all": "npm run test:a11y && npm run test:a11y:e2e",
    "test:visual": "playwright test tests/e2e/visual-regression.test.ts",
    "test:visual:update": "UPDATE_VISUAL_BASELINES=true playwright test tests/e2e/visual-regression.test.ts",
    "test:visual:ci": "CI=true playwright test tests/e2e/visual-regression.test.ts --reporter=html",
    "test:visual:headed": "playwright test tests/e2e/visual-regression.test.ts --headed",
    "test:all": "npm run test:coverage && npm run test:integration && npm run test:e2e",
    "test:infrastructure": "vitest run tests/infrastructure",
    "test:infrastructure:watch": "vitest watch tests/infrastructure",
    "test:all:complete": "npm run test:infrastructure && npm run test:coverage && npm run test:integration && npm run test:e2e && npm run test:a11y:all && npm run test:visual",
    "test:cached": "tsx scripts/cached-test-runner.ts all",
    "test:cached:unit": "tsx scripts/cached-test-runner.ts unit",
    "test:cached:integration": "tsx scripts/cached-test-runner.ts integration",
    "test:cached:e2e": "tsx scripts/cached-test-runner.ts e2e",
    "parallel:analyze": "tsx scripts/parallel-test-optimizer.ts analyze",
    "parallel:generate": "tsx scripts/parallel-test-optimizer.ts generate",
    "parallel:validate": "tsx scripts/parallel-test-optimizer.ts validate",
    "test:runner": "node scripts/test-runner.js",
    "test:runner:ci": "node scripts/test-runner.js --ci --reporter all --bail",
    "test:runner:unit": "node scripts/test-runner.js --suite unit",
    "test:runner:integration": "node scripts/test-runner.js --suite integration",
    "test:runner:e2e": "node scripts/test-runner.js --suite e2e",
    "test:runner:parallel": "node scripts/test-runner.js --parallel",
    "test:runner:report": "node scripts/test-runner.js --reporter html --output ./reports",
    "test:runner:monitor": "node scripts/test-performance-monitor.js report",
    "quality:lint": "eslint . --config eslint.config.quality.js",
    "quality:lint:fix": "eslint . --config eslint.config.quality.js --fix",
    "quality:check": "npm run quality:lint && npm run typecheck && npm run format:check",
    "quality:complexity": "complexity-report --output reports/complexity.json --format json src/ server/",
    "quality:duplicates": "jscpd src/ server/",
    "quality:metrics": "npm run quality:complexity && npm run quality:duplicates",
    "quality:all": "npm run quality:check && npm run quality:metrics && npm run test:coverage:ci",
    "cache": "tsx scripts/cache-management.ts",
    "cache:status": "tsx scripts/cache-management.ts status",
    "cache:clear": "tsx scripts/cache-management.ts invalidate",
    "cache:clear:unit": "tsx scripts/cache-management.ts invalidate unit",
    "cache:clear:integration": "tsx scripts/cache-management.ts invalidate integration",
    "cache:clear:e2e": "tsx scripts/cache-management.ts invalidate e2e",
    "cache:monitor": "tsx scripts/cache-management.ts monitor",
    "cache:warm": "tsx scripts/warm-all-caches.ts",
    "test:optimize": "tsx scripts/optimize-test-grouping.ts",
    "cache:check": "tsx scripts/cache-management.ts check",
    "cache:check:unit": "tsx scripts/cache-management.ts check unit",
    "cache:check:integration": "tsx scripts/cache-management.ts check integration",
    "cache:check:e2e": "tsx scripts/cache-management.ts check e2e",
    "test:cache:stats": "tsx scripts/test-cache-manager.ts stats",
    "test:cache:clear": "tsx scripts/test-cache-manager.ts clear",
    "test:cache:clean": "tsx scripts/test-cache-manager.ts clean",
    "test:cache:warmup": "node scripts/manage-test-cache.mjs warmup",
    "test:cache:optimize": "node scripts/manage-test-cache.mjs optimize",
    "test:optimize:grouping": "tsx scripts/optimize-test-grouping.ts optimize",
    "test:optimize:jest-configs": "tsx scripts/optimize-test-grouping.ts jest-configs",
    "test:parallel:unit": "vitest run --pool=threads --poolOptions.threads.maxThreads=4",
    "test:parallel:unit:fast": "vitest run tests/unit --pool=threads --poolOptions.threads.maxThreads=2",
    "test:parallel:accessibility": "vitest run tests/accessibility --pool=threads --poolOptions.threads.maxThreads=4",
    "test:sequential:integration": "jest --maxWorkers=1 --testPathPattern=tests/integration",
    "test:parallel:safe": "npm run test:parallel:unit:fast && npm run test:parallel:accessibility",
    "test:sequential:required": "npm run test:sequential:integration",
    "test:optimized": "npm run test:parallel:safe && npm run test:sequential:required && npm run test:e2e",
    "ci:optimize": "tsx scripts/optimize-ci-runtime.ts",
    "ci:analyze": "tsx scripts/optimize-ci-runtime.ts",
    "benchmark:db": "tsx scripts/benchmark-database-performance.ts",
    "test:db:inmemory": "USE_IN_MEMORY_DB=true npm run test",
    "test:db:file": "USE_IN_MEMORY_DB=false npm run test",
    "test:integration:inmemory": "USE_IN_MEMORY_DB=true npm run test:integration",
    "branch-protection:configure": "node scripts/configure-branch-protection.js",
    "deps:check": "node scripts/check-dependencies.js",
    "deps:fix": "node scripts/check-dependencies.js --fix",
    "security:check": "node scripts/security-check.js",
    "security:check:quick": "node scripts/security-check.js --quick",
    "security:check:dependencies": "node scripts/security-check.js --dependencies",
    "security:check:secrets": "node scripts/security-check.js --secrets",
    "security:check:config": "node scripts/security-check.js --config",
    "security:fix": "node scripts/security-check.js --fix",
    "performance:collect": "node scripts/test-performance-dashboard.js --collect",
    "performance:analyze": "node scripts/test-performance-dashboard.js --analyze",
    "performance:dashboard": "node scripts/test-performance-dashboard.js --generate",
    "performance:serve": "node scripts/test-performance-dashboard.js --serve",
    "performance:alerts": "node scripts/test-performance-dashboard.js --alert",
    "performance:full": "node scripts/test-performance-dashboard.js --collect && node scripts/test-performance-dashboard.js --analyze && node scripts/test-performance-dashboard.js --alert && node scripts/test-performance-dashboard.js --generate",
    "flaky:track": "node scripts/flaky-test-tracker.js track",
    "flaky:track:unit": "node scripts/flaky-test-tracker.js track unit",
    "flaky:track:integration": "node scripts/flaky-test-tracker.js track integration",
    "flaky:track:e2e": "node scripts/flaky-test-tracker.js track e2e",
    "flaky:analyze": "node scripts/flaky-test-tracker.js analyze",
    "flaky:report": "node scripts/flaky-test-tracker.js report",
    "flaky:config": "node scripts/flaky-test-tracker.js config",
    "coverage:track": "node scripts/coverage-trend-tracker.js track",
    "coverage:collect": "tsx scripts/coverage-monitor.ts collect",
    "coverage:report": "tsx scripts/coverage-monitor.ts report",
    "coverage:analyze": "node scripts/coverage-trend-tracker.js analyze",
    "coverage:enforce": "tsx scripts/coverage-monitor.ts enforce",
    "coverage:watch": "tsx scripts/coverage-monitor.ts watch",
    "test:reliability:track": "tsx scripts/test-reliability-tracker.ts track",
    "test:reliability:flaky": "tsx scripts/test-reliability-tracker.ts flaky",
    "test:reliability:report": "tsx scripts/test-reliability-tracker.ts report",
    "ci:performance:measure": "tsx scripts/ci-performance-monitor.ts measure",
    "ci:performance:analyze": "tsx scripts/ci-performance-monitor.ts analyze",
    "ci:performance:recommend": "tsx scripts/ci-performance-monitor.ts recommend",
    "ci:performance:optimize": "tsx scripts/ci-performance-monitor.ts optimize",
    "ci:performance-adjust": "echo '# CI Performance Adjustments' > .env.ci && echo 'NODE_OPTIONS=--max-old-space-size=4096' >> .env.ci && echo 'export NODE_OPTIONS=--max-old-space-size=4096' > scripts/ci-env-export.sh && echo '{}' > performance-thresholds-ci.json",
    "ci:resource-monitor": "echo 'CI Resource Limits: Memory=4GB, CPU=2 cores, Timeout=10min'",
    "monitor-test-resources": "echo 'Monitoring test resources...'",
    "coverage:check": "node scripts/coverage-trend-tracker.js check",
    "pr:comment": "node scripts/pr-comment-bot.js generate",
    "pr:comment:collect": "node scripts/pr-comment-bot.js collect",
    "pr:comment:only": "node scripts/pr-comment-bot.js comment",
    "docs:api:generate": "node scripts/generate-openapi-docs.js generate",
    "docs:api:validate": "node scripts/generate-openapi-docs.js validate",
    "docs:api:html": "node scripts/generate-openapi-docs.js html",
    "docs:api:postman": "node scripts/generate-openapi-docs.js postman",
    "setup:quick": "tsx scripts/quick-setup.ts",
    "onboarding:start": "tsx scripts/onboarding-check.ts start",
    "onboarding:check": "tsx scripts/onboarding-check.ts check",
    "onboarding:validate": "tsx scripts/onboarding-check.ts validate",
    "onboarding:report": "tsx scripts/onboarding-check.ts report"
  },
  "dependencies": {
    "@mdi/svg": "^7.4.47",
    "@prisma/client": "^6.13.0",
    "bcrypt": "^6.0.0",
    "cors": "^2.8.5",
    "date-fns": "^4.1.0",
    "dotenv": "^17.2.0",
    "express": "^5.1.0",
    "express-rate-limit": "^7.5.1",
    "helmet": "^8.1.0",
    "js-yaml": "^4.1.0",
    "jsonwebtoken": "^9.0.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^7.6.3",
    "recharts": "^3.1.0",
    "uuid": "^11.1.0",
    "winston": "^3.17.0",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@axe-core/playwright": "^4.10.2",
    "@axe-core/react": "^4.10.2",
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@faker-js/faker": "^9.9.0",
    "@playwright/test": "^1.54.1",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/bcrypt": "^5.0.2",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.3",
    "@types/express-rate-limit": "^5.1.3",
    "@types/jest": "^30.0.0",
    "@types/jest-axe": "^3.5.9",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/node": "^24.0.13",
    "@types/pngjs": "^6.0.5",
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@types/supertest": "^6.0.3",
    "@types/uuid": "^10.0.0",
    "@types/winston": "^2.4.4",
    "@typescript-eslint/eslint-plugin": "^8.36.0",
    "@typescript-eslint/parser": "^8.36.0",
    "@vitejs/plugin-react": "^4.6.0",
    "@vitest/coverage-v8": "^3.2.4",
    "autoprefixer": "^10.4.16",
    "axe-core": "^4.10.3",
    "chromium-bidi": "^7.1.1",
    "complexity-report": "^2.0.0-alpha",
    "concurrently": "^9.2.0",
    "cross-env": "^7.0.3",
    "eslint": "^9.31.0",
    "eslint-config-prettier": "^10.1.5",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-prettier": "^5.5.1",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-testing-library": "^7.6.0",
    "eslint-plugin-unicorn": "^57.0.0",
    "husky": "^9.1.7",
    "jest": "^30.0.4",
    "jest-axe": "^10.0.0",
    "jest-junit": "^16.0.0",
    "jscpd": "^4.0.5",
    "jsdom": "^26.1.0",
    "lint-staged": "^16.1.2",
    "pixelmatch": "^7.1.0",
    "playwright": "^1.54.0",
    "pngjs": "^7.0.0",
    "postcss": "^8.4.32",
    "prettier": "^3.6.2",
    "prisma": "^6.13.0",
    "rollup": "^4.45.0",
    "supertest": "^7.1.3",
    "tailwindcss": "^4.1.11",
    "ts-jest": "^29.4.0",
    "tsx": "^4.6.2",
    "typescript": "^5.3.3",
    "vite": "^7.0.4",
    "vitest": "^3.2.4"
  },
  "optionalDependencies": {
    "@rollup/rollup-linux-x64-gnu": "^4.45.0"
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "eslint --fix",
      "prettier --write",
      "vitest related --run"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write"
    ]
  },
  "volta": {
    "node": "24.5.0"
  }
}
