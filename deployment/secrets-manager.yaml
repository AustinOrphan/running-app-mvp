# Secrets Management Configuration using External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: external-secrets
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/ExternalSecretsRole

---
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: aws-secrets-manager
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
            namespace: external-secrets

---
# Development Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: running-app-secrets-dev
  namespace: running-app-dev
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: running-app-secrets-dev
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        DATABASE_URL: '{{ .database_url }}'
        REDIS_URL: '{{ .redis_url }}'
        JWT_SECRET: '{{ .jwt_secret }}'
        LOG_SALT: '{{ .log_salt }}'
  data:
    - secretKey: database_url
      remoteRef:
        key: running-app/dev/database
        property: url
    - secretKey: redis_url
      remoteRef:
        key: running-app/dev/redis
        property: url
    - secretKey: jwt_secret
      remoteRef:
        key: running-app/dev/auth
        property: jwt_secret
    - secretKey: log_salt
      remoteRef:
        key: running-app/dev/logging
        property: salt

---
# Staging Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: running-app-secrets-staging
  namespace: running-app-staging
spec:
  refreshInterval: 30m
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: running-app-secrets-staging
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        DATABASE_URL: '{{ .database_url }}'
        REDIS_URL: '{{ .redis_url }}'
        JWT_SECRET: '{{ .jwt_secret }}'
        LOG_SALT: '{{ .log_salt }}'
        SENTRY_DSN: '{{ .sentry_dsn }}'
        SLACK_WEBHOOK_URL: '{{ .slack_webhook }}'
        NEW_RELIC_LICENSE_KEY: '{{ .new_relic_key }}'
  dataFrom:
    - extract:
        key: running-app/staging/all

---
# Production Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: running-app-secrets-prod
  namespace: running-app-prod
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: running-app-secrets-prod
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        DATABASE_URL: '{{ .database_url }}'
        DATABASE_REPLICA_URL: '{{ .database_replica_url }}'
        REDIS_URL: '{{ .redis_url }}'
        REDIS_CLUSTER_URLS: '{{ .redis_cluster_urls }}'
        JWT_SECRET: '{{ .jwt_secret }}'
        JWT_REFRESH_SECRET: '{{ .jwt_refresh_secret }}'
        LOG_SALT: '{{ .log_salt }}'
        ENCRYPTION_KEY: '{{ .encryption_key }}'
        SENTRY_DSN: '{{ .sentry_dsn }}'
        SLACK_WEBHOOK_URL: '{{ .slack_webhook }}'
        NEW_RELIC_LICENSE_KEY: '{{ .new_relic_key }}'
        DATADOG_API_KEY: '{{ .datadog_api_key }}'
        AWS_ACCESS_KEY_ID: '{{ .aws_access_key_id }}'
        AWS_SECRET_ACCESS_KEY: '{{ .aws_secret_access_key }}'
        S3_BUCKET_NAME: '{{ .s3_bucket_name }}'
  dataFrom:
    - extract:
        key: running-app/prod/all
    - extract:
        key: running-app/prod/aws
    - extract:
        key: running-app/prod/monitoring

---
# GitHub Container Registry Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ghcr-secret
  namespace: running-app-prod
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: aws-secrets-manager
    kind: ClusterSecretStore
  target:
    name: ghcr-secret
    creationPolicy: Owner
    template:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: |
          {
            "auths": {
              "ghcr.io": {
                "username": "{{ .github_username }}",
                "password": "{{ .github_token }}",
                "auth": "{{ printf "%s:%s" .github_username .github_token | b64enc }}"
              }
            }
          }
  data:
    - secretKey: github_username
      remoteRef:
        key: github/container-registry
        property: username
    - secretKey: github_token
      remoteRef:
        key: github/container-registry
        property: token

---
# Vault Provider Alternative (for HashiCorp Vault users)
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: vault-backend
spec:
  provider:
    vault:
      server: 'https://vault.example.com:8200'
      path: 'secret'
      version: 'v2'
      auth:
        kubernetes:
          mountPath: 'kubernetes'
          role: 'running-app'
          serviceAccountRef:
            name: running-app-backend
            namespace: running-app-prod

---
# Sealed Secrets Alternative (for GitOps)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: running-app-secrets-sealed
  namespace: running-app-prod
spec:
  encryptedData:
    DATABASE_URL: AgA... # Encrypted value
    JWT_SECRET: AgB... # Encrypted value
  template:
    metadata:
      name: running-app-secrets
      namespace: running-app-prod
    type: Opaque
