apiVersion: v1
kind: ConfigMap
metadata:
  name: running-app-config-dev
  namespace: running-app-dev
data:
  NODE_ENV: 'development'
  PORT: '3001'
  LOG_LEVEL: 'debug'
  DEPLOYMENT_MODE: 'development'
  FRONTEND_URL: 'https://dev.running-app.example.com'
  API_URL: 'https://api-dev.running-app.example.com'
  CACHE_TTL: '300'
  RATE_LIMIT_WINDOW: '900000'
  RATE_LIMIT_MAX: '1000'
  CORS_ORIGINS: 'https://dev.running-app.example.com,http://localhost:3000'

---
apiVersion: v1
kind: Secret
metadata:
  name: running-app-secrets-dev
  namespace: running-app-dev
type: Opaque
stringData:
  DATABASE_URL: 'postgresql://devuser:devpass@postgres-dev:5432/running_app_dev?schema=public'
  REDIS_URL: 'redis://:devredispass@redis-dev:6379'
  JWT_SECRET: 'dev-jwt-secret-change-in-production'
  LOG_SALT: 'dev-log-salt'
  SENTRY_DSN: ''
  SLACK_WEBHOOK_URL: ''

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: running-app-backend-dev
  namespace: running-app-dev
  labels:
    app: running-app
    component: backend
    environment: development
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: running-app
      component: backend
      environment: development
  template:
    metadata:
      labels:
        app: running-app
        component: backend
        environment: development
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '3001'
        prometheus.io/path: '/metrics'
    spec:
      containers:
        - name: backend
          image: ghcr.io/yourusername/running-app:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3001
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: running-app-config-dev
            - secretRef:
                name: running-app-secrets-dev
          resources:
            requests:
              memory: '256Mi'
              cpu: '250m'
            limits:
              memory: '512Mi'
              cpu: '500m'
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health/ready
              port: 3001
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: logs
              mountPath: /app/logs
            - name: uploads
              mountPath: /app/uploads
      volumes:
        - name: logs
          emptyDir: {}
        - name: uploads
          persistentVolumeClaim:
            claimName: running-app-uploads-dev

---
apiVersion: v1
kind: Service
metadata:
  name: running-app-backend-dev
  namespace: running-app-dev
  labels:
    app: running-app
    component: backend
    environment: development
spec:
  type: ClusterIP
  ports:
    - port: 3001
      targetPort: 3001
      protocol: TCP
      name: http
  selector:
    app: running-app
    component: backend
    environment: development

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: running-app-backend-hpa-dev
  namespace: running-app-dev
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: running-app-backend-dev
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
