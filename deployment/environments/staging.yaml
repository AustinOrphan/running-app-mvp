apiVersion: v1
kind: ConfigMap
metadata:
  name: running-app-config-staging
  namespace: running-app-staging
data:
  NODE_ENV: 'staging'
  PORT: '3001'
  LOG_LEVEL: 'info'
  DEPLOYMENT_MODE: 'staging'
  FRONTEND_URL: 'https://staging.running-app.example.com'
  API_URL: 'https://api-staging.running-app.example.com'
  CACHE_TTL: '600'
  RATE_LIMIT_WINDOW: '900000'
  RATE_LIMIT_MAX: '500'
  CORS_ORIGINS: 'https://staging.running-app.example.com'
  ENABLE_MONITORING: 'true'
  ENABLE_TRACING: 'true'

---
apiVersion: v1
kind: Secret
metadata:
  name: running-app-secrets-staging
  namespace: running-app-staging
type: Opaque
stringData:
  DATABASE_URL: 'postgresql://staginguser:${STAGING_DB_PASSWORD}@postgres-staging:5432/running_app_staging?schema=public&sslmode=require'
  REDIS_URL: 'redis://:${STAGING_REDIS_PASSWORD}@redis-staging:6379'
  JWT_SECRET: '${STAGING_JWT_SECRET}'
  LOG_SALT: '${STAGING_LOG_SALT}'
  SENTRY_DSN: '${STAGING_SENTRY_DSN}'
  SLACK_WEBHOOK_URL: '${STAGING_SLACK_WEBHOOK}'
  NEW_RELIC_LICENSE_KEY: '${STAGING_NEW_RELIC_KEY}'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: running-app-backend-staging
  namespace: running-app-staging
  labels:
    app: running-app
    component: backend
    environment: staging
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: running-app
      component: backend
      environment: staging
  template:
    metadata:
      labels:
        app: running-app
        component: backend
        environment: staging
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '3001'
        prometheus.io/path: '/metrics'
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - running-app
                topologyKey: kubernetes.io/hostname
      containers:
        - name: backend
          image: ghcr.io/yourusername/running-app:${IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3001
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: running-app-config-staging
            - secretRef:
                name: running-app-secrets-staging
          resources:
            requests:
              memory: '512Mi'
              cpu: '500m'
            limits:
              memory: '1Gi'
              cpu: '1000m'
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3001
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health/ready
              port: 3001
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /api/health
              port: 3001
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          volumeMounts:
            - name: logs
              mountPath: /app/logs
            - name: uploads
              mountPath: /app/uploads
            - name: cache
              mountPath: /app/cache
      volumes:
        - name: logs
          persistentVolumeClaim:
            claimName: running-app-logs-staging
        - name: uploads
          persistentVolumeClaim:
            claimName: running-app-uploads-staging
        - name: cache
          emptyDir:
            sizeLimit: 1Gi
      imagePullSecrets:
        - name: ghcr-secret

---
apiVersion: v1
kind: Service
metadata:
  name: running-app-backend-staging
  namespace: running-app-staging
  labels:
    app: running-app
    component: backend
    environment: staging
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:region:account-id:certificate/cert-id
spec:
  type: LoadBalancer
  ports:
    - port: 443
      targetPort: 3001
      protocol: TCP
      name: https
  selector:
    app: running-app
    component: backend
    environment: staging

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: running-app-backend-hpa-staging
  namespace: running-app-staging
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: running-app-backend-staging
  minReplicas: 4
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70
    - type: Pods
      pods:
        metric:
          name: http_requests_per_second
        target:
          type: AverageValue
          averageValue: '100'
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max
