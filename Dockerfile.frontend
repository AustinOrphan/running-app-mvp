# Frontend Dockerfile for Running App
# Stage 1: Dependencies
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy dependency files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Stage 2: Builder
FROM node:18-alpine AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY package*.json ./

# Copy source code
COPY . .

# Build arguments
ARG NODE_ENV=production
ARG VITE_API_URL
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Set build-time environment variables
ENV NODE_ENV=${NODE_ENV}
ENV VITE_API_URL=${VITE_API_URL}

# Build the frontend application
RUN npm run build

# Stage 3: Production
FROM nginx:alpine AS runner

# Install required packages
RUN apk add --no-cache \
    curl \
    jq \
    bash

# Remove default nginx config
RUN rm -rf /etc/nginx/conf.d/*

# Copy custom nginx configuration
COPY nginx/default.conf /etc/nginx/conf.d/

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy environment variable injection script
COPY scripts/inject-env-vars.sh /docker-entrypoint.d/20-inject-env-vars.sh
RUN chmod +x /docker-entrypoint.d/20-inject-env-vars.sh

# Add metadata labels
LABEL org.opencontainers.image.title="Running App Frontend" \
      org.opencontainers.image.description="Frontend for Running App" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}"

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]