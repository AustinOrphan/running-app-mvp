name: 🏷️ Auto Label PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: read
  pull-requests: write

jobs:
  label:
    name: 🏷️ Auto Label
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Apply labels based on changed files
        uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

      - name: 📊 Analyze PR for additional labels
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const labels = [];
            const title = context.payload.pull_request.title.toLowerCase();
            const body = context.payload.pull_request.body || '';

            // Size-based labels (now using created size labels)
            const totalChanges = files.reduce((sum, file) => sum + file.additions + file.deletions, 0);
            const changedFiles = files.length;

            if (totalChanges > 500 || changedFiles > 20) {
              labels.push('size-large');
            } else if (totalChanges > 100 || changedFiles > 10) {
              labels.push('size-medium');
            } else {
              labels.push('size-small');
            }

            // Type-based labels from title (using existing labels)
            if (title.includes('fix') || title.includes('bug')) {
              labels.push('bug');
            } else if (title.includes('feat') || title.includes('feature') || title.includes('enhancement')) {
              labels.push('enhancement');
            } else if (title.includes('docs') || title.includes('documentation')) {
              labels.push('documentation');
            } else if (title.includes('refactor') || title.includes('cleanup')) {
              labels.push('technical-debt');
            } else if (title.includes('test')) {
              labels.push('testing');
            } else if (title.includes('perf') || title.includes('performance')) {
              labels.push('performance');
            }

            // Priority based on keywords (using existing P0-P3 labels)
            if (title.includes('critical') || title.includes('urgent') || body.includes('critical') || body.includes('urgent')) {
              labels.push('P0-critical');
            } else if (title.includes('high') || body.includes('high priority')) {
              labels.push('P1-high');
            } else if (title.includes('low') || body.includes('low priority')) {
              labels.push('P3-low');
            } else {
              labels.push('P2-medium');
            }

            // Breaking changes (using created label)
            if (title.includes('breaking') || body.includes('breaking change') || body.includes('BREAKING CHANGE')) {
              labels.push('breaking-change');
            }

            // WIP detection (using created label)
            if (title.includes('wip') || title.includes('work in progress') || title.includes('draft')) {
              labels.push('work-in-progress');
            }

            // Hotfix detection (using created label)
            if (title.includes('hotfix') || title.includes('urgent fix') || title.includes('emergency')) {
              labels.push('hotfix');
            }

            // API changes (using created label)
            if (files.some(file => 
              file.filename.includes('routes/') ||
              file.filename.includes('api/') ||
              file.filename.includes('endpoints')
            ) || title.includes('api') || body.includes('api change')) {
              labels.push('api-change');
            }

            // Migration (using created label)
            if (files.some(file => 
              file.filename.includes('migration') ||
              file.filename.includes('schema') ||
              file.filename.includes('prisma/migrations')
            ) || title.includes('migration') || title.includes('schema')) {
              labels.push('migration');
            }

            // Configuration (using created label)
            if (files.some(file => 
              file.filename.includes('.env') ||
              file.filename.includes('config') ||
              file.filename.includes('settings') ||
              file.filename.endsWith('.json') ||
              file.filename.endsWith('.yaml') ||
              file.filename.endsWith('.yml')
            ) || title.includes('config') || title.includes('settings')) {
              labels.push('config');
            }

            // Community contributions (using created label)
            if (context.payload.pull_request.author_association === 'FIRST_TIME_CONTRIBUTOR' ||
                context.payload.pull_request.author_association === 'CONTRIBUTOR') {
              labels.push('community');
            }

            // Needs reproduction (using created label)
            if (title.includes('bug') && (
              body.includes('reproduce') ||
              body.includes('reproduction') ||
              body.includes('steps to reproduce') ||
              body.length < 100
            )) {
              labels.push('needs-reproduction');
            }

            // Needs review (using created label)
            if (!title.includes('wip') && !title.includes('draft') && 
                !context.payload.pull_request.draft) {
              labels.push('needs-review');
            }

            // Accessibility (using existing label)
            if (files.some(file => file.filename.includes('a11y') || file.filename.includes('accessibility')) ||
                title.includes('accessibility') || title.includes('a11y')) {
              labels.push('accessibility');
            }

            // Security (using existing label)
            if (files.some(file => 
              file.filename.includes('auth') || 
              file.filename.includes('security') || 
              file.filename.includes('jwt') ||
              file.filename.includes('bcrypt')
            ) || title.includes('security') || title.includes('auth')) {
              labels.push('security');
            }

            // Auth-specific (using existing label)
            if (files.some(file => 
              file.filename.includes('auth') || 
              file.filename.includes('jwt') ||
              file.filename.includes('bcrypt') ||
              file.filename.includes('login') ||
              file.filename.includes('middleware/auth')
            ) || title.includes('auth') || title.includes('login')) {
              labels.push('auth');
            }

            // Database (using existing label)
            if (files.some(file => 
              file.filename.includes('prisma') ||
              file.filename.includes('database') ||
              file.filename.includes('migration') ||
              file.filename.includes('.sql') ||
              file.filename.includes('schema')
            ) || title.includes('database') || title.includes('prisma')) {
              labels.push('database');
            }

            // UI/UX (using existing label)
            if (files.some(file => 
              file.filename.includes('components') ||
              file.filename.includes('styles') ||
              file.filename.includes('.css') ||
              file.filename.includes('ui')
            ) || title.includes('ui') || title.includes('ux') || title.includes('style')) {
              labels.push('UI/UX');
            }

            // Mobile (using existing label)
            if (files.some(file => 
              file.filename.includes('mobile') ||
              file.filename.includes('responsive') ||
              file.filename.includes('touch')
            ) || title.includes('mobile') || title.includes('responsive')) {
              labels.push('mobile');
            }

            // Dependencies (using existing label)
            if (files.some(file => 
              file.filename.includes('package.json') ||
              file.filename.includes('package-lock.json') ||
              file.filename.includes('yarn.lock')
            ) || title.includes('deps') || title.includes('dependencies') || title.includes('update')) {
              labels.push('dependencies');
            }

            // Tooling (using existing label)
            if (files.some(file => 
              file.filename.includes('.github/workflows') ||
              file.filename.includes('vite.config') ||
              file.filename.includes('jest.config') ||
              file.filename.includes('eslint') ||
              file.filename.includes('prettier') ||
              file.filename.includes('tsconfig')
            ) || title.includes('tooling') || title.includes('build') || title.includes('ci')) {
              labels.push('tooling');
            }

            // Observability (using existing label)
            if (files.some(file => 
              file.filename.includes('logger') ||
              file.filename.includes('monitoring') ||
              file.filename.includes('analytics') ||
              file.filename.includes('error')
            ) || title.includes('logging') || title.includes('monitoring')) {
              labels.push('observability');
            }

            // Research (using existing label)
            if (title.includes('research') || title.includes('investigation') || title.includes('spike') ||
                body.includes('research') || body.includes('investigation')) {
              labels.push('research');
            }

            // Needs design (using existing label)
            if (title.includes('design') || body.includes('needs design') || body.includes('ui design')) {
              labels.push('needs-design');
            }

            // Good first issue (using existing label - small, docs, or test-only changes)
            if (totalChanges < 50 && (
              files.every(file => file.filename.endsWith('.md')) ||
              files.every(file => file.filename.includes('test') || file.filename.includes('spec'))
            )) {
              labels.push('good first issue');
            }

            // Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: labels
              });
            }

            console.log(`Applied labels: ${labels.join(', ')}`);

      - name: 📝 Add PR size comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const totalChanges = files.reduce((sum, file) => sum + file.additions + file.deletions, 0);
            const changedFiles = files.length;
            const additions = files.reduce((sum, file) => sum + file.additions, 0);
            const deletions = files.reduce((sum, file) => sum + file.deletions, 0);

            let sizeCategory = 'Small';
            let sizeEmoji = '🟢';
            let sizeAdvice = 'Great! Small PRs are easier to review and less likely to introduce bugs.';

            if (totalChanges > 500 || changedFiles > 20) {
              sizeCategory = 'Large';
              sizeEmoji = '🔴';
              sizeAdvice = 'Consider breaking this PR into smaller, focused changes. Large PRs are harder to review and more likely to introduce bugs.';
            } else if (totalChanges > 100 || changedFiles > 10) {
              sizeCategory = 'Medium';
              sizeEmoji = '🟡';
              sizeAdvice = 'This is a medium-sized PR. Consider if it can be broken down further.';
            }

            // Check if this comment already exists
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('📊 PR Analysis')
            );

            const commentBody = `## 📊 PR Analysis

            ### 📏 Size Analysis
            ${sizeEmoji} **${sizeCategory}** - ${totalChanges} total changes across ${changedFiles} files

            | Metric | Value |
            |--------|-------|
            | Files changed | ${changedFiles} |
            | Lines added | +${additions} |
            | Lines deleted | -${deletions} |
            | Total changes | ${totalChanges} |

            ### 💡 Recommendation
            ${sizeAdvice}

            ### 🏷️ Auto-applied Labels
            Labels have been automatically applied based on the changed files and PR content.

            ---
            *Generated by [Auto Label Workflow](${context.payload.repository.html_url}/actions/runs/${context.runId})*`;

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

  # Summary job
  label-summary:
    name: 📋 Labeling Summary
    runs-on: ubuntu-latest
    needs: [label]
    if: always()

    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 🏷️ Auto-labeling Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.label.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**PR:** ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Applied Labels:" >> $GITHUB_STEP_SUMMARY
          echo "- **File-based labels** (from .github/labeler.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- **Size labels:** size-small, size-medium, size-large" >> $GITHUB_STEP_SUMMARY
          echo "- **Type labels:** bug, enhancement, documentation, technical-debt" >> $GITHUB_STEP_SUMMARY
          echo "- **Priority labels:** P0-critical, P1-high, P2-medium, P3-low" >> $GITHUB_STEP_SUMMARY
          echo "- **Area labels:** frontend, backend, database, auth, UI/UX, etc." >> $GITHUB_STEP_SUMMARY
          echo "- **Status labels:** work-in-progress, needs-review, needs-reproduction" >> $GITHUB_STEP_SUMMARY
          echo "- **Special labels:** breaking-change, hotfix, api-change, migration, config" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Benefits:" >> $GITHUB_STEP_SUMMARY
          echo "- Improved PR organization" >> $GITHUB_STEP_SUMMARY
          echo "- Better review assignment" >> $GITHUB_STEP_SUMMARY
          echo "- Automated triage" >> $GITHUB_STEP_SUMMARY
          echo "- Enhanced searchability" >> $GITHUB_STEP_SUMMARY
