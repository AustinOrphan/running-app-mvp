name: 🔧 Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  # Dependency Updates
  dependency-updates:
    name: 📦 Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📦 Check for outdated packages
        run: |
          echo "📦 Checking for outdated packages..."
          npm outdated > outdated-packages.txt || true
          if [ -s outdated-packages.txt ]; then
            echo "📦 Found outdated packages:"
            cat outdated-packages.txt
            echo "OUTDATED_PACKAGES=true" >> $GITHUB_ENV
          else
            echo "✅ All packages are up to date"
            echo "OUTDATED_PACKAGES=false" >> $GITHUB_ENV
          fi

      - name: 📊 Upload outdated packages report
        if: env.OUTDATED_PACKAGES == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: outdated-packages-report
          path: outdated-packages.txt
          retention-days: 7

  # Security Audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --json > audit-results.json || true
          
          # Check if there are any vulnerabilities
          VULN_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.total // 0')
          HIGH_VULN_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULN_COUNT=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "Total vulnerabilities: $VULN_COUNT"
          echo "High vulnerabilities: $HIGH_VULN_COUNT"
          echo "Critical vulnerabilities: $CRITICAL_VULN_COUNT"
          
          echo "VULN_COUNT=$VULN_COUNT" >> $GITHUB_ENV
          echo "HIGH_VULN_COUNT=$HIGH_VULN_COUNT" >> $GITHUB_ENV
          echo "CRITICAL_VULN_COUNT=$CRITICAL_VULN_COUNT" >> $GITHUB_ENV

      - name: 📊 Upload security audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

      - name: 🚨 Create security issue
        if: env.CRITICAL_VULN_COUNT > 0
        uses: actions/github-script@v7
        with:
          script: |
            const { CRITICAL_VULN_COUNT, HIGH_VULN_COUNT, VULN_COUNT } = process.env;
            
            const issueBody = `
            ## 🚨 Security Vulnerabilities Detected
            
            **Critical vulnerabilities:** ${CRITICAL_VULN_COUNT}
            **High vulnerabilities:** ${HIGH_VULN_COUNT}
            **Total vulnerabilities:** ${VULN_COUNT}
            
            ### Recommended Actions:
            1. Review the security audit results
            2. Update vulnerable dependencies
            3. Run tests to ensure compatibility
            4. Deploy security fixes promptly
            
            ### Commands to Fix:
            \`\`\`bash
            npm audit fix
            npm audit fix --force  # If needed for breaking changes
            \`\`\`
            
            **Generated by:** [Maintenance Workflow](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Security Alert: ${CRITICAL_VULN_COUNT} Critical Vulnerabilities Found`,
              body: issueBody,
              labels: ['security', 'bug', 'priority-high']
            });

  # Test Health Check
  test-health-check:
    name: 🧪 Test Health Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: running_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/running_app_test
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: 🧪 Run comprehensive test suite
        run: |
          echo "🧪 Running comprehensive test suite..."
          
          # Run all tests and capture results
          npm run test:coverage:all > test-results.txt 2>&1 || TEST_FAILED=true
          
          # Extract test statistics
          UNIT_TESTS=$(grep -o "[0-9]* passed" test-results.txt | head -1 | grep -o "[0-9]*" || echo "0")
          FAILED_TESTS=$(grep -o "[0-9]* failed" test-results.txt | head -1 | grep -o "[0-9]*" || echo "0")
          
          echo "Unit tests passed: $UNIT_TESTS"
          echo "Tests failed: $FAILED_TESTS"
          
          echo "UNIT_TESTS=$UNIT_TESTS" >> $GITHUB_ENV
          echo "FAILED_TESTS=$FAILED_TESTS" >> $GITHUB_ENV
          echo "TEST_FAILED=${TEST_FAILED:-false}" >> $GITHUB_ENV

      - name: 📊 Generate test health report
        run: |
          echo "📊 Generating test health report..."
          
          cat > test-health-report.md << EOF
          # 🧪 Test Health Report
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          
          ## Test Results
          - **Unit tests passed:** ${UNIT_TESTS}
          - **Tests failed:** ${FAILED_TESTS}
          - **Overall status:** $([ "$TEST_FAILED" = "true" ] && echo "❌ Failed" || echo "✅ Passed")
          
          ## Coverage Status
          - Coverage report generated in workflow artifacts
          
          ## Recommendations
          $([ "$TEST_FAILED" = "true" ] && echo "- 🚨 **Critical:** Fix failing tests immediately" || echo "- ✅ All tests are passing")
          - 📊 Review coverage reports for improvement opportunities
          - 🔄 Consider adding more edge case tests
          
          ---
          *Generated by [Maintenance Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*
          EOF

      - name: 📊 Upload test health report
        uses: actions/upload-artifact@v4
        with:
          name: test-health-report
          path: |
            test-health-report.md
            test-results.txt
            coverage/
            coverage-integration/
          retention-days: 30

      - name: 🚨 Create test failure issue
        if: env.TEST_FAILED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { FAILED_TESTS } = process.env;
            
            const issueBody = `
            ## 🚨 Test Health Check Failed
            
            **Failed tests:** ${FAILED_TESTS}
            **Date:** ${new Date().toISOString()}
            
            ### Description
            The automated test health check has detected failing tests. This could indicate:
            - Breaking changes in dependencies
            - Environment issues
            - Flaky tests that need attention
            
            ### Action Required
            1. Review the test results in the workflow artifacts
            2. Identify and fix failing tests
            3. Ensure all tests pass before merging new changes
            
            ### Workflow Details
            - **Run ID:** ${{ github.run_id }}
            - **Workflow:** [Test Health Check](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Next Steps
            - [ ] Review test failure details
            - [ ] Fix failing tests
            - [ ] Run tests locally to verify fixes
            - [ ] Re-run maintenance workflow to verify
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Test Health Check Failed: ${FAILED_TESTS} tests failing`,
              body: issueBody,
              labels: ['testing', 'bug', 'maintenance']
            });

  # Performance Monitoring
  performance-monitoring:
    name: ⚡ Performance Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📊 Analyze bundle size
        run: |
          echo "📊 Analyzing bundle size..."
          
          # Get bundle sizes
          MAIN_BUNDLE_SIZE=$(stat -f%z dist/assets/index-*.js 2>/dev/null || echo "0")
          CSS_BUNDLE_SIZE=$(stat -f%z dist/assets/index-*.css 2>/dev/null || echo "0")
          
          # Convert to KB
          MAIN_BUNDLE_KB=$((MAIN_BUNDLE_SIZE / 1024))
          CSS_BUNDLE_KB=$((CSS_BUNDLE_SIZE / 1024))
          
          echo "Main bundle size: ${MAIN_BUNDLE_KB}KB"
          echo "CSS bundle size: ${CSS_BUNDLE_KB}KB"
          
          # Set thresholds (in KB)
          MAIN_BUNDLE_THRESHOLD=500
          CSS_BUNDLE_THRESHOLD=100
          
          echo "MAIN_BUNDLE_KB=$MAIN_BUNDLE_KB" >> $GITHUB_ENV
          echo "CSS_BUNDLE_KB=$CSS_BUNDLE_KB" >> $GITHUB_ENV
          
          # Check if bundles exceed thresholds
          if [ "$MAIN_BUNDLE_KB" -gt "$MAIN_BUNDLE_THRESHOLD" ]; then
            echo "⚠️ Main bundle size exceeds threshold: ${MAIN_BUNDLE_KB}KB > ${MAIN_BUNDLE_THRESHOLD}KB"
            echo "BUNDLE_SIZE_WARNING=true" >> $GITHUB_ENV
          fi

      - name: 📊 Generate performance report
        run: |
          cat > performance-report.md << EOF
          # ⚡ Performance Report
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          
          ## Bundle Sizes
          - **Main bundle:** ${MAIN_BUNDLE_KB}KB
          - **CSS bundle:** ${CSS_BUNDLE_KB}KB
          
          ## Performance Metrics
          - Bundle size trend: $([ "$BUNDLE_SIZE_WARNING" = "true" ] && echo "⚠️ Increasing" || echo "✅ Stable")
          
          ## Recommendations
          $([ "$BUNDLE_SIZE_WARNING" = "true" ] && echo "- 🚨 **Critical:** Main bundle size is getting large" || echo "- ✅ Bundle sizes are within acceptable limits")
          - 📦 Consider code splitting for large features
          - 🗜️ Review dependencies for optimization opportunities
          - 📊 Monitor bundle size trends over time
          EOF

      - name: 📊 Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md
          retention-days: 30

  # Cleanup Old Artifacts
  cleanup-artifacts:
    name: 🧹 Cleanup Old Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: 🧹 Delete old workflow artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get all workflow runs
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            // Delete artifacts older than 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            for (const run of runs.data.workflow_runs) {
              const runDate = new Date(run.created_at);
              if (runDate < thirtyDaysAgo) {
                try {
                  const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                    owner,
                    repo,
                    run_id: run.id
                  });
                  
                  for (const artifact of artifacts.data.artifacts) {
                    await github.rest.actions.deleteArtifact({
                      owner,
                      repo,
                      artifact_id: artifact.id
                    });
                    console.log(`Deleted artifact: ${artifact.name} from run ${run.id}`);
                  }
                } catch (error) {
                  console.log(`Could not delete artifacts for run ${run.id}: ${error.message}`);
                }
              }
            }

  # Summary Report
  maintenance-summary:
    name: 📋 Maintenance Summary
    runs-on: ubuntu-latest
    needs: [dependency-updates, security-audit, test-health-check, performance-monitoring, cleanup-artifacts]
    if: always()
    steps:
      - name: 📋 Generate maintenance summary
        run: |
          echo "## 🔧 Maintenance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Updates | ${{ needs.dependency-updates.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Health Check | ${{ needs.test-health-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Monitoring | ${{ needs.performance-monitoring.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cleanup Artifacts | ${{ needs.cleanup-artifacts.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Next maintenance run:** Tomorrow at 2 AM UTC" >> $GITHUB_STEP_SUMMARY