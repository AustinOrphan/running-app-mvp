name: 🔍 SonarQube Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  schedule:
    # Run weekly code quality analysis
    - cron: '0 10 * * MON'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  sonarqube:
    name: 🔍 SonarQube Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: 🧪 Run tests with coverage
        run: npm run test:coverage:ci
        continue-on-error: true

      - name: 🔍 SonarQube Scan
        uses: sonarqube-quality-gate-action@v1.3.0
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: 📊 Upload SonarQube results to GitHub
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sonarqube-results
          path: target/sonar/
          retention-days: 30

  sonar-quality-gate:
    name: ✅ SonarQube Quality Gate
    runs-on: ubuntu-latest
    needs: sonarqube
    if: always()
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ✅ Check Quality Gate
        uses: sonarqube-quality-gate-action@v1.3.0
        with:
          scanMetadataReportFile: target/sonar/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: 📝 Comment Quality Gate status on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const qualityGateStatus = process.env.QUALITY_GATE_STATUS || 'UNKNOWN';
            const sonarUrl = process.env.SONAR_HOST_URL || 'SonarQube';

            let emoji = '❓';
            let message = 'Quality Gate status is unknown';

            switch(qualityGateStatus) {
              case 'OK':
                emoji = '✅';
                message = 'Quality Gate passed successfully!';
                break;
              case 'ERROR':
                emoji = '❌';
                message = 'Quality Gate failed. Please check the issues.';
                break;
              case 'WARN':
                emoji = '⚠️';
                message = 'Quality Gate passed with warnings.';
                break;
            }

            const body = `## 🔍 SonarQube Quality Gate ${emoji}

            **Status**: ${qualityGateStatus}
            **Message**: ${message}

            [View detailed results in ${sonarUrl}](${process.env.SONAR_HOST_URL})

            ---
            🤖 *Generated by SonarQube Analysis*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  code-metrics:
    name: 📊 Code Metrics Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📊 Install code analysis tools
        run: |
          npm install -g complexity-report
          npm install -g jscpd
          npm install -g @typescript-eslint/parser

      - name: 📊 Generate complexity report
        run: |
          mkdir -p reports
          complexity-report --output reports/complexity.json --format json src/ server/ || true
          complexity-report --output reports/complexity.html --format html src/ server/ || true
        continue-on-error: true

      - name: 🔍 Run duplicate code detection
        run: |
          jscpd --reporters json,html --output reports/ src/ server/ || true
        continue-on-error: true

      - name: 📊 Generate code metrics summary
        run: |
          echo "# 📊 Code Metrics Report" > reports/metrics-summary.md
          echo "" >> reports/metrics-summary.md
          echo "## 📈 Lines of Code" >> reports/metrics-summary.md
          find src server -name "*.ts" -o -name "*.tsx" | xargs wc -l | tail -1 >> reports/metrics-summary.md
          echo "" >> reports/metrics-summary.md
          echo "## 📁 File Count" >> reports/metrics-summary.md
          echo "TypeScript files: $(find src server -name "*.ts" -o -name "*.tsx" | wc -l)" >> reports/metrics-summary.md
          echo "React components: $(find src -name "*.tsx" | wc -l)" >> reports/metrics-summary.md
          echo "Server files: $(find server -name "*.ts" | wc -l)" >> reports/metrics-summary.md
          echo "" >> reports/metrics-summary.md
          echo "Generated on: $(date)" >> reports/metrics-summary.md

      - name: 📊 Upload code metrics
        uses: actions/upload-artifact@v4
        with:
          name: code-metrics
          path: reports/
          retention-days: 30

      - name: 📝 Comment metrics on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('reports/metrics-summary.md')) {
              const summary = fs.readFileSync('reports/metrics-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
