name: 🚀 Rolling Deployment Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      deployment_percentage:
        description: 'Initial deployment percentage for canary'
        required: false
        default: '10'
        type: string

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOYMENT_TIMEOUT: 600
  HEALTH_CHECK_RETRIES: 30
  HEALTH_CHECK_INTERVAL: 10

jobs:
  # ==================== Phase 1: Build & Security ====================

  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: 📊 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔒 Run SAST with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          generateSarif: true

      - name: 🔍 Secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: [security-scan]

    outputs:
      version: ${{ steps.version.outputs.version }}
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: running_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🏷️ Determine version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(echo ${GITHUB_SHA} | cut -c1-7)
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: 📥 Install dependencies
        run: npm ci --audit=false

      - name: 🧪 Run unit tests
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/running_app_test
          JWT_SECRET: test-secret-key
          NODE_ENV: test

      - name: 🧪 Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/running_app_test
          JWT_SECRET: test-secret-key
          NODE_ENV: test

      - name: 📊 Code quality checks
        run: |
          npm run lint:check
          npm run format:check
          npm run typecheck

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/running_app_test
          JWT_SECRET: test-secret-key

      - name: 🔐 Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.version.outputs.version }}

      - name: 🐳 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.version.outputs.version }}

      - name: 🔍 Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          format: 'sarif'
          output: 'docker-scan-results.sarif'

      - name: 📊 Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'docker-scan-results.sarif'

      - name: 📊 Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.sha }}
          path: |
            coverage/
            test-results/
            docker-scan-results.sarif
          retention-days: 30

  # ==================== Phase 2: Environment Deployments ====================

  deploy-development:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')

    environment:
      name: development
      url: https://dev.running-app.example.com

    steps:
      - name: 📥 Checkout deployment configs
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            deployment/
            scripts/

      - name: 🔧 Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔐 Configure cloud credentials
        run: |
          echo "Configure your cloud provider credentials here"
          # Example for AWS:
          # aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws eks update-kubeconfig --name dev-cluster --region us-east-1

      - name: 🚀 Deploy to development
        run: |
          ./scripts/deploy-rolling.sh \
            --environment development \
            --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }} \
            --replicas 2 \
            --max-surge 1 \
            --max-unavailable 0

      - name: 🔍 Verify deployment
        run: |
          ./scripts/verify-deployment.sh \
            --environment development \
            --timeout ${{ env.DEPLOYMENT_TIMEOUT }} \
            --health-check-retries ${{ env.HEALTH_CHECK_RETRIES }}

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-development]
    if: |
      always() && 
      needs.build-and-test.result == 'success' &&
      (needs.deploy-development.result == 'success' || needs.deploy-development.result == 'skipped') &&
      (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))

    environment:
      name: staging
      url: https://staging.running-app.example.com

    steps:
      - name: 📥 Checkout deployment configs
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            deployment/
            scripts/
            tests/e2e/

      - name: 🔧 Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔐 Configure cloud credentials
        run: |
          echo "Configure staging cloud credentials"

      - name: 🚀 Start rolling deployment
        id: deploy
        run: |
          DEPLOYMENT_ID=$(./scripts/deploy-rolling.sh \
            --environment staging \
            --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }} \
            --replicas 4 \
            --max-surge 2 \
            --max-unavailable 1 \
            --strategy rolling \
            --health-check-interval ${{ env.HEALTH_CHECK_INTERVAL }} \
            --output-id)
          echo "deployment-id=${DEPLOYMENT_ID}" >> $GITHUB_OUTPUT

      - name: 🔍 Monitor rolling update
        run: |
          ./scripts/monitor-rolling-update.sh \
            --deployment-id ${{ steps.deploy.outputs.deployment-id }} \
            --environment staging \
            --timeout ${{ env.DEPLOYMENT_TIMEOUT }}

      - name: 🧪 Run smoke tests
        run: |
          ./scripts/run-smoke-tests.sh \
            --environment staging \
            --deployment-id ${{ steps.deploy.outputs.deployment-id }}

      - name: 🎭 Run E2E tests
        run: |
          npm ci
          npm run test:e2e -- --grep "@staging"
        env:
          E2E_BASE_URL: https://staging.running-app.example.com
          E2E_ENVIRONMENT: staging

  approval-production:
    name: 🔐 Production Approval
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      always() && 
      needs.deploy-staging.result == 'success' &&
      (startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))

    environment:
      name: production-approval

    steps:
      - name: 📊 Generate deployment report
        run: |
          echo "## 📊 Deployment Report" > deployment-report.md
          echo "" >> deployment-report.md
          echo "### Build Information" >> deployment-report.md
          echo "- Version: ${{ needs.build-and-test.outputs.version }}" >> deployment-report.md
          echo "- Image: ${{ needs.build-and-test.outputs.image-tag }}" >> deployment-report.md
          echo "- Digest: ${{ needs.build-and-test.outputs.image-digest }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### Test Results" >> deployment-report.md
          echo "- ✅ Security scans passed" >> deployment-report.md
          echo "- ✅ Unit tests passed" >> deployment-report.md
          echo "- ✅ Integration tests passed" >> deployment-report.md
          echo "- ✅ Staging deployment successful" >> deployment-report.md
          echo "- ✅ E2E tests passed on staging" >> deployment-report.md

      - name: 📊 Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ github.sha }}
          path: deployment-report.md
          retention-days: 90

      - name: ⏸️ Wait for approval
        run: |
          echo "⏸️ Waiting for manual approval..."
          echo "Please review the deployment report and approve production deployment"

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, approval-production]

    environment:
      name: production
      url: https://running-app.example.com

    strategy:
      matrix:
        region: [us-east-1, eu-west-1, ap-southeast-1]

    steps:
      - name: 📥 Checkout deployment configs
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            deployment/
            scripts/
            monitoring/

      - name: 🔧 Configure kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 🔐 Configure production credentials
        run: |
          echo "Configure production cloud credentials for region: ${{ matrix.region }}"

      - name: 📊 Pre-deployment snapshot
        run: |
          ./scripts/create-deployment-snapshot.sh \
            --environment production \
            --region ${{ matrix.region }} \
            --deployment-id ${{ github.run_id }}

      - name: 🚀 Start canary deployment
        id: canary
        run: |
          CANARY_ID=$(./scripts/deploy-canary.sh \
            --environment production \
            --region ${{ matrix.region }} \
            --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }} \
            --percentage ${{ github.event.inputs.deployment_percentage || '10' }} \
            --output-id)
          echo "canary-id=${CANARY_ID}" >> $GITHUB_OUTPUT

      - name: 🔍 Monitor canary metrics
        run: |
          ./scripts/monitor-canary.sh \
            --canary-id ${{ steps.canary.outputs.canary-id }} \
            --region ${{ matrix.region }} \
            --duration 300 \
            --error-threshold 1 \
            --latency-threshold 200

      - name: 🚀 Promote canary to full deployment
        if: success()
        run: |
          ./scripts/promote-canary.sh \
            --canary-id ${{ steps.canary.outputs.canary-id }} \
            --region ${{ matrix.region }} \
            --strategy rolling \
            --batch-size 25 \
            --batch-pause 60

      - name: 🔍 Verify production deployment
        run: |
          ./scripts/verify-deployment.sh \
            --environment production \
            --region ${{ matrix.region }} \
            --comprehensive-check \
            --timeout ${{ env.DEPLOYMENT_TIMEOUT }}

      - name: 📊 Update deployment metrics
        if: always()
        run: |
          ./scripts/update-deployment-metrics.sh \
            --environment production \
            --region ${{ matrix.region }} \
            --status ${{ job.status }} \
            --deployment-id ${{ github.run_id }}

  # ==================== Phase 3: Post-Deployment ====================

  post-deployment-validation:
    name: ✅ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'

    steps:
      - name: 📥 Checkout test suites
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            tests/
            monitoring/

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install test dependencies
        run: |
          cd tests/
          npm ci

      - name: 🧪 Run production smoke tests
        run: |
          npm run test:smoke:production
        env:
          PRODUCTION_URL: https://running-app.example.com
          TEST_TIMEOUT: 30000

      - name: ⚡ Performance validation
        run: |
          npm run test:performance:production
        env:
          PERFORMANCE_BUDGET: ./performance-budget.json

      - name: 🔍 Security validation
        run: |
          npm run test:security:production

      - name: 📊 Generate validation report
        if: always()
        run: |
          ./scripts/generate-validation-report.sh \
            --deployment-id ${{ github.run_id }} \
            --output ./validation-report.html

      - name: 📊 Upload validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-report-${{ github.sha }}
          path: validation-report.html
          retention-days: 90

  rollback:
    name: 🔄 Automated Rollback
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-validation]
    if: |
      always() && 
      (needs.deploy-production.result == 'failure' || needs.post-deployment-validation.result == 'failure')

    environment:
      name: production-rollback

    steps:
      - name: 📥 Checkout rollback scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/
            deployment/

      - name: 🔄 Execute rollback
        run: |
          ./scripts/execute-rollback.sh \
            --environment production \
            --deployment-id ${{ github.run_id }} \
            --strategy immediate \
            --notify-stakeholders

      - name: 🔍 Verify rollback
        run: |
          ./scripts/verify-rollback.sh \
            --environment production \
            --timeout 300

      - name: 📊 Generate incident report
        if: always()
        run: |
          ./scripts/generate-incident-report.sh \
            --deployment-id ${{ github.run_id }} \
            --failure-reason "${{ needs.deploy-production.result == 'failure' && 'deployment' || 'validation' }}" \
            --output ./incident-report.md

      - name: 🚨 Create incident ticket
        if: always()
        run: |
          ./scripts/create-incident-ticket.sh \
            --severity high \
            --title "Production deployment rollback - ${{ github.run_id }}" \
            --description-file ./incident-report.md

  # ==================== Phase 4: Finalization ====================

  deployment-metrics:
    name: 📊 Update Deployment Metrics
    runs-on: ubuntu-latest
    needs:
      [
        build-and-test,
        deploy-development,
        deploy-staging,
        deploy-production,
        post-deployment-validation,
      ]
    if: always()

    steps:
      - name: 📥 Checkout scripts
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/
            monitoring/

      - name: 📊 Calculate deployment metrics
        run: |
          ./scripts/calculate-deployment-metrics.sh \
            --deployment-id ${{ github.run_id }} \
            --start-time ${{ github.event.repository.updated_at }} \
            --build-status ${{ needs.build-and-test.result }} \
            --staging-status ${{ needs.deploy-staging.result }} \
            --production-status ${{ needs.deploy-production.result }} \
            --validation-status ${{ needs.post-deployment-validation.result }}

      - name: 📈 Update dashboards
        run: |
          ./scripts/update-deployment-dashboards.sh \
            --deployment-id ${{ github.run_id }} \
            --version ${{ needs.build-and-test.outputs.version }}

  notification:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, rollback, deployment-metrics]
    if: always()

    steps:
      - name: 📥 Checkout notification templates
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/notification-templates/

      - name: 📧 Send deployment summary
        run: |
          STATUS="success"
          if [[ "${{ needs.rollback.result }}" == "success" ]]; then
            STATUS="rollback"
          elif [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
            STATUS="failure"
          fi

          ./scripts/send-notification.sh \
            --type deployment \
            --status ${STATUS} \
            --deployment-id ${{ github.run_id }} \
            --version ${{ needs.build-and-test.outputs.version }} \
            --channels "slack,email,teams"

      - name: 📝 Update deployment log
        run: |
          ./scripts/update-deployment-log.sh \
            --deployment-id ${{ github.run_id }} \
            --version ${{ needs.build-and-test.outputs.version }} \
            --status ${{ job.status }}

  create-release:
    name: 📝 Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-production, post-deployment-validation]
    if: |
      always() && 
      needs.deploy-production.result == 'success' && 
      needs.post-deployment-validation.result == 'success' && 
      startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate changelog
        id: changelog
        uses: conventional-changelog-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: false

      - name: 📝 Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Release ${{ github.ref_name }}

            ### 📊 Deployment Summary
            - ✅ Successfully deployed to all production regions
            - ✅ All post-deployment validations passed
            - ✅ Performance metrics within acceptable range

            ### 📝 Changelog
            ${{ steps.changelog.outputs.clean_changelog }}

            ### 🐳 Docker Image
            ```
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.version }}
            ```

            ### 📊 Test Coverage
            View the full test coverage report in the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          draft: false
          prerelease: false
