name: 🚀 Optimized CI Pipeline

on:
  push:
    branches: [main, develop, fix/integration-tests]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DATABASE_URL: file:./prisma/test.db
  JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters
  NODE_ENV: test

jobs:
  # Quick quality checks first
  quality-checks:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: 💾 Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            ~/.cache/ms-playwright
          key: deps-${{ runner.os }}-${{ hashFiles('package-lock.json', '.nvmrc') }}

      - name: 📥 Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: 🔍 Run all quality checks
        run: |
          echo "::group::Linting"
          npm run lint
          echo "::endgroup::"

          echo "::group::Type checking"
          npm run typecheck
          echo "::endgroup::"

          echo "::group::Format checking"
          npm run format:check
          echo "::endgroup::"

  # Unit tests with caching
  unit-tests:
    name: 🧪 Unit Tests
    needs: quality-checks
    uses: ./.github/workflows/cache-test-results.yml
    with:
      test-type: unit
      test-command: npm run test:coverage:unit:ci
      cache-key-prefix: v1-test-cache
      coverage-enabled: true

  # Integration tests with caching
  integration-tests:
    name: 🔗 Integration Tests
    needs: quality-checks
    uses: ./.github/workflows/cache-test-results.yml
    with:
      test-type: integration
      test-command: npm run test:coverage:integration:ci
      cache-key-prefix: v1-test-cache
      coverage-enabled: true

  # E2E tests with caching
  e2e-tests:
    name: 🌐 E2E Tests
    needs: quality-checks
    uses: ./.github/workflows/cache-test-results.yml
    with:
      test-type: e2e
      test-command: npm run test:e2e:ci
      cache-key-prefix: v1-test-cache
      coverage-enabled: false

  # Performance tests (only on main branch)
  performance-tests:
    name: 📊 Performance Tests
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: 💾 Restore dependency cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: deps-${{ runner.os }}-${{ hashFiles('package-lock.json', '.nvmrc') }}

      - name: 📥 Install dependencies
        run: npm ci

      - name: 💾 Cache performance baselines
        uses: actions/cache@v4
        with:
          path: |
            performance-baseline.json
            performance-reports/
          key: perf-baseline-${{ github.sha }}
          restore-keys: |
            perf-baseline-

      - name: 🚀 Run performance tests
        run: |
          npm run test:performance:validate
          npm run test:performance:ci

      - name: 📊 Generate performance report
        if: always()
        run: npm run test:performance:report

  # Final summary
  ci-summary:
    name: 📋 CI Summary
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Generate summary
        run: |
          echo "# 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test results
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Cache Hit |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|-----------|" >> $GITHUB_STEP_SUMMARY

          # Unit tests
          if [ "${{ needs.unit-tests.outputs.test-passed }}" = "true" ]; then
            UNIT_STATUS="✅ Passed"
          else
            UNIT_STATUS="❌ Failed"
          fi
          UNIT_CACHE="${{ needs.unit-tests.outputs.cache-hit == 'true' && '✅ Yes' || '❌ No' }}"
          echo "| Unit Tests | $UNIT_STATUS | $UNIT_CACHE |" >> $GITHUB_STEP_SUMMARY

          # Integration tests
          if [ "${{ needs.integration-tests.outputs.test-passed }}" = "true" ]; then
            INT_STATUS="✅ Passed"
          else
            INT_STATUS="❌ Failed"
          fi
          INT_CACHE="${{ needs.integration-tests.outputs.cache-hit == 'true' && '✅ Yes' || '❌ No' }}"
          echo "| Integration Tests | $INT_STATUS | $INT_CACHE |" >> $GITHUB_STEP_SUMMARY

          # E2E tests
          if [ "${{ needs.e2e-tests.outputs.test-passed }}" = "true" ]; then
            E2E_STATUS="✅ Passed"
          else
            E2E_STATUS="❌ Failed"
          fi
          E2E_CACHE="${{ needs.e2e-tests.outputs.cache-hit == 'true' && '✅ Yes' || '❌ No' }}"
          echo "| E2E Tests | $E2E_STATUS | $E2E_CACHE |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY

          # Cache efficiency
          echo "## 💾 Cache Efficiency" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          TOTAL_JOBS=3
          CACHE_HITS=0
          [ "${{ needs.unit-tests.outputs.cache-hit }}" = "true" ] && CACHE_HITS=$((CACHE_HITS + 1))
          [ "${{ needs.integration-tests.outputs.cache-hit }}" = "true" ] && CACHE_HITS=$((CACHE_HITS + 1))
          [ "${{ needs.e2e-tests.outputs.cache-hit }}" = "true" ] && CACHE_HITS=$((CACHE_HITS + 1))

          CACHE_RATE=$((CACHE_HITS * 100 / TOTAL_JOBS))
          echo "- Cache hit rate: **${CACHE_RATE}%** (${CACHE_HITS}/${TOTAL_JOBS})" >> $GITHUB_STEP_SUMMARY

          if [ $CACHE_RATE -gt 66 ]; then
            echo "- Status: 🎉 **Excellent** - Most tests used cached results" >> $GITHUB_STEP_SUMMARY
          elif [ $CACHE_RATE -gt 33 ]; then
            echo "- Status: ✅ **Good** - Some tests used cached results" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ⚠️ **Low** - Consider investigating cache misses" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Cache helps reduce CI time by skipping unchanged tests._" >> $GITHUB_STEP_SUMMARY

  # Clean up old caches weekly
  cleanup-caches:
    name: 🧹 Cleanup Old Caches
    if: github.event.schedule == '0 0 * * 0' # Weekly on Sunday
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧹 Clean test caches
        run: |
          npx tsx scripts/test-cache-manager.ts clean 14  # Clean caches older than 2 weeks
