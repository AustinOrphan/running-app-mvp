name: 🚀 Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '22.x'

jobs:
  # Pre-deployment Tests
  pre-deployment-tests:
    name: 🧪 Pre-deployment Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: running_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/running_app_test
      JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: 🧪 Run comprehensive test suite
        run: npm run test:coverage:all

      - name: ✅ Verify coverage thresholds
        run: npm run test:coverage:check

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎭 Run E2E tests
        run: npm run test:e2e

      - name: 📊 Generate deployment coverage report
        run: npm run test:coverage:report

      - name: 📊 Upload pre-deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pre-deployment-artifacts
          path: |
            coverage/
            coverage-integration/
            dist/
            test-results/
          retention-days: 30

  # Security Checks
  security-checks:
    name: 🔒 Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level high

      - name: 🔍 Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Build and Package
  build-and-package:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [pre-deployment-tests, security-checks]
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Create deployment package
        run: |
          mkdir -p deployment-package
          cp -r dist/ deployment-package/
          cp package.json deployment-package/
          cp package-lock.json deployment-package/
          cp -r prisma/ deployment-package/
          tar -czf deployment-package.tar.gz deployment-package/

      - name: 📊 Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package.tar.gz
          retention-days: 90

  # Staging Deployment
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-running-app.example.com

    steps:
      - name: 📥 Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: Deploy to staging server, update environment variables, etc.
          echo "✅ Staging deployment completed"

      - name: 🔍 Staging smoke tests
        run: |
          echo "🔍 Running staging smoke tests..."
          # Add smoke tests for staging environment
          # Example: Health checks, basic functionality verification
          echo "✅ Staging smoke tests passed"

  # Production Deployment
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://running-app.example.com

    steps:
      - name: 📥 Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment commands here
          # Example: Deploy to production server, update environment variables, etc.
          echo "✅ Production deployment completed"

      - name: 🔍 Production smoke tests
        run: |
          echo "🔍 Running production smoke tests..."
          # Add smoke tests for production environment
          echo "✅ Production smoke tests passed"

  # Post-deployment Tests
  post-deployment-tests:
    name: 🧪 Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🧪 Run post-deployment E2E tests
        run: |
          # Run E2E tests against the deployed environment
          # Update base URL to point to deployed app
          echo "🧪 Running post-deployment tests..."
          # npm run test:e2e:staging or npm run test:e2e:production
          echo "✅ Post-deployment tests completed"

      - name: ⚡ Performance testing
        run: |
          echo "⚡ Running performance tests..."
          # Add performance testing commands
          echo "✅ Performance tests completed"

  # Rollback (if needed)
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    environment:
      name: rollback

    steps:
      - name: 🔄 Rollback deployment
        run: |
          echo "🔄 Rolling back deployment..."
          # Add rollback commands here
          echo "✅ Rollback completed"

  # Notify
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production, post-deployment-tests]

    steps:
      - name: 📢 Notify on success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          # Add notification commands here (Slack, Discord, email, etc.)

      - name: 📢 Notify on failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Add failure notification commands here

  # Release Notes
  create-release:
    name: 📝 Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && needs.deploy-production.result == 'success'
    needs: [deploy-production]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate release notes
        run: |
          echo "Generating release notes..."
          # Generate changelog or release notes
          echo "📦 Release Notes for ${{ github.ref_name }}" > release-notes.md
          echo "" >> release-notes.md
          echo "## 🧪 Test Results" >> release-notes.md
          echo "- ✅ All tests passed" >> release-notes.md
          echo "- ✅ Coverage thresholds met" >> release-notes.md
          echo "- ✅ Security checks passed" >> release-notes.md
          echo "- ✅ Deployment successful" >> release-notes.md

      - name: 📝 Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: release-notes.md
          draft: false
          prerelease: false
