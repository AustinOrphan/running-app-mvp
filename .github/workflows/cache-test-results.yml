name: Cache Test Results

on:
  workflow_call:
    inputs:
      test-type:
        required: true
        type: string
        description: 'Type of test (unit, integration, e2e)'
      test-command:
        required: true
        type: string
        description: 'Command to run tests'
      cache-key-prefix:
        required: false
        type: string
        default: 'test-cache'
        description: 'Prefix for cache key'
      coverage-enabled:
        required: false
        type: boolean
        default: true
        description: 'Whether coverage is collected'

jobs:
  test-with-cache:
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters
      NODE_ENV: test

    outputs:
      cache-hit: ${{ steps.check-cache.outputs.cache-hit }}
      test-passed: ${{ steps.run-tests.outputs.passed }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for accurate file change detection

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: üîç Detect changed files
        id: changed-files
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            BASE_SHA=${{ github.event.before }}
            HEAD_SHA=${{ github.sha }}
          fi

          # Get changed test files
          TEST_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '\.(test|spec)\.(ts|tsx|js|jsx)$' || true)
          echo "test-files<<EOF" >> $GITHUB_OUTPUT
          echo "$TEST_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Get changed source files
          SRC_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '^(src|server)/' | grep -E '\.(ts|tsx|js|jsx)$' || true)
          echo "src-files<<EOF" >> $GITHUB_OUTPUT
          echo "$SRC_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check if only non-code files changed
          ALL_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA)
          CODE_CHANGED=$(echo "$ALL_CHANGED" | grep -E '\.(ts|tsx|js|jsx|json)$' || true)
          if [ -z "$CODE_CHANGED" ]; then
            echo "only-docs-changed=true" >> $GITHUB_OUTPUT
          else
            echo "only-docs-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: üîë Generate cache key
        id: cache-key
        run: |
          # Base cache key components
          OS=${{ runner.os }}
          NODE_VERSION=$(cat .nvmrc)
          DEPS_HASH=${{ hashFiles('package-lock.json') }}

          # Test-specific hash
          TEST_HASH=$(echo "${{ steps.changed-files.outputs.test-files }}" | sha256sum | cut -d' ' -f1)
          SRC_HASH=$(echo "${{ steps.changed-files.outputs.src-files }}" | sha256sum | cut -d' ' -f1)

          # Combine into cache key
          CACHE_KEY="${{ inputs.cache-key-prefix }}-${{ inputs.test-type }}-${OS}-node${NODE_VERSION}-${DEPS_HASH:0:8}-${TEST_HASH:0:8}-${SRC_HASH:0:8}"
          echo "key=$CACHE_KEY" >> $GITHUB_OUTPUT

          # Restore keys for partial matches
          echo "restore-keys<<EOF" >> $GITHUB_OUTPUT
          echo "${{ inputs.cache-key-prefix }}-${{ inputs.test-type }}-${OS}-node${NODE_VERSION}-${DEPS_HASH:0:8}-" >> $GITHUB_OUTPUT
          echo "${{ inputs.cache-key-prefix }}-${{ inputs.test-type }}-${OS}-node${NODE_VERSION}-" >> $GITHUB_OUTPUT
          echo "${{ inputs.cache-key-prefix }}-${{ inputs.test-type }}-${OS}-" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üíæ Check test result cache
        id: check-cache
        uses: actions/cache@v4
        with:
          path: |
            .test-cache/
            test-results/
            coverage/
            coverage-integration/
            playwright-report/
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ steps.cache-key.outputs.restore-keys }}

      - name: üìä Skip tests if only docs changed
        if: steps.changed-files.outputs.only-docs-changed == 'true'
        run: |
          echo "‚úÖ Only documentation files changed - skipping tests"
          echo "passed=true" >> $GITHUB_OUTPUT
          exit 0

      - name: üíæ Cache node_modules
        if: steps.check-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: üì• Install dependencies
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: üóÑÔ∏è Setup test environment
        if: steps.check-cache.outputs.cache-hit != 'true' && inputs.test-type != 'unit'
        run: |
          # Ensure database directory exists
          mkdir -p prisma
          # Deploy migrations and generate client
          npm run ci-db-setup
          npm run verify-db-setup

      - name: üé≠ Install Playwright
        if: steps.check-cache.outputs.cache-hit != 'true' && inputs.test-type == 'e2e'
        run: npx playwright install --with-deps chromium

      - name: üß™ Run tests
        id: run-tests
        if: steps.check-cache.outputs.cache-hit != 'true'
        run: |
          set +e  # Don't exit on test failure

          # Create results directory
          mkdir -p test-results

          # Run tests with JSON output
          if [ "${{ inputs.test-type }}" = "unit" ]; then
            ${{ inputs.test-command }} --reporter=json --outputFile=test-results/${{ inputs.test-type }}-results.json
          elif [ "${{ inputs.test-type }}" = "integration" ]; then
            ${{ inputs.test-command }} --json --outputFile=test-results/${{ inputs.test-type }}-results.json
          else
            ${{ inputs.test-command }} --reporter=json
          fi

          TEST_EXIT_CODE=$?

          # Check if tests passed
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All tests passed"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "‚ùå Some tests failed"
          fi

          # Save cache metadata
          npx tsx scripts/test-cache-manager.ts save \
            "${{ inputs.test-type }}" \
            "test-results/${{ inputs.test-type }}-results.json"

          exit $TEST_EXIT_CODE

      - name: üìä Use cached results
        if: steps.check-cache.outputs.cache-hit == 'true'
        run: |
          echo "‚úÖ Using cached test results"

          # Display cached results summary
          if [ -f "test-results/${{ inputs.test-type }}-results.json" ]; then
            echo "Cached test results found:"
            cat test-results/${{ inputs.test-type }}-results.json | jq -r '
              if .testResults then
                "Tests: \(.testResults | length)",
                "Passed: \(.testResults | map(select(.status == "passed")) | length)",
                "Failed: \(.testResults | map(select(.status == "failed")) | length)"
              elif .numPassedTests then
                "Passed: \(.numPassedTests)",
                "Failed: \(.numFailedTests)",
                "Total: \(.numTotalTests)"
              else
                "Results format not recognized"
              end
            ' || echo "Could not parse test results"
          fi

          echo "passed=true" >> $GITHUB_OUTPUT

      - name: üìà Upload coverage
        if: inputs.coverage-enabled && (steps.check-cache.outputs.cache-hit != 'true' || always())
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ inputs.test-type }}
          path: |
            coverage/
            coverage-integration/
          if-no-files-found: ignore

      - name: üßπ Cleanup
        if: always() && inputs.test-type != 'unit'
        run: |
          npm run ci-db-teardown || true

      - name: üìä Generate cache report
        if: always()
        run: |
          echo "### üíæ Test Cache Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-cache.outputs.cache-hit }}" = "true" ]; then
            echo "‚úÖ **Cache Hit** - Tests were not re-run" >> $GITHUB_STEP_SUMMARY
            echo "- Cache Key: \`${{ steps.cache-key.outputs.key }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Cache Miss** - Tests were executed" >> $GITHUB_STEP_SUMMARY
            echo "- Reason: New or modified test/source files" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed Files:**" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.changed-files.outputs.test-files }}" ]; then
            echo "- Test files: $(echo "${{ steps.changed-files.outputs.test-files }}" | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ steps.changed-files.outputs.src-files }}" ]; then
            echo "- Source files: $(echo "${{ steps.changed-files.outputs.src-files }}" | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi
