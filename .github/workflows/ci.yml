name: 🚀 CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quality checks (fast feedback)
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 💅 Check formatting
        run: npm run format:check

      - name: 🔧 Type check
        run: npm run typecheck

  # Unit tests with coverage
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests with coverage
        run: npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # Integration tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate dev --name init || npx prisma migrate deploy
          npx prisma generate

      - name: 🔗 Run integration tests with coverage
        run: npm run test:coverage:integration

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: integration
          name: integration-tests
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # End-to-end tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate dev --name init || npx prisma migrate deploy
          npx prisma generate

      - name: 🎭 Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: 📸 Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Accessibility tests
  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate dev --name init || npx prisma migrate deploy
          npx prisma generate

      - name: ♿ Run accessibility tests
        run: npm run test:a11y:ci

      - name: 📸 Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: playwright-report/
          retention-days: 7

  # Build verification
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate dev --name init || npx prisma migrate deploy
          npx prisma generate

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Security scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔒 Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: 📦 Setup Node.js for npm audit
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: npm audit --audit-level=moderate

  # Combine coverage reports
  coverage-report:
    name: 📊 Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    timeout-minutes: 10
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate dev --name init || npx prisma migrate deploy
          npx prisma generate

      - name: 📊 Generate combined coverage report
        run: npm run test:coverage:ci

      - name: 📊 Upload combined coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: combined
          name: combined-coverage
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 📊 Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

  # Final status check
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, e2e-tests, accessibility-tests, build]
    if: always()

    steps:
      - name: ✅ Check CI status
        run: |
          # Check critical job statuses
          quality_status="${{ needs.quality.result }}"
          unit_status="${{ needs.unit-tests.result }}"
          integration_status="${{ needs.integration-tests.result }}"
          e2e_status="${{ needs.e2e-tests.result }}"
          a11y_status="${{ needs.accessibility-tests.result }}"
          build_status="${{ needs.build.result }}"

          echo "Job statuses:"
          echo "- Quality: $quality_status"
          echo "- Unit Tests: $unit_status"
          echo "- Integration Tests: $integration_status"
          echo "- E2E Tests: $e2e_status"
          echo "- Accessibility Tests: $a11y_status"
          echo "- Build: $build_status"

          # Fail if any critical jobs failed
          if [[ "$quality_status" == "failure" || "$unit_status" == "failure" || "$integration_status" == "failure" || "$e2e_status" == "failure" || "$a11y_status" == "failure" || "$build_status" == "failure" ]]; then
            echo "❌ Critical CI jobs failed"
            exit 1
          fi

      - name: 🎉 CI Success
        run: echo "All critical CI checks passed successfully!"
