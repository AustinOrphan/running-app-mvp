name: 🚀 CI Pipeline with Caching

on:
  push:
    branches: [main, develop, fix/integration-tests]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Compute cache keys for better cache management
  compute-cache-keys:
    name: 📊 Compute Cache Keys
    runs-on: ubuntu-latest
    outputs:
      node-cache-key: ${{ steps.cache-keys.outputs.node-cache }}
      test-cache-key: ${{ steps.cache-keys.outputs.test-cache }}
      coverage-cache-key: ${{ steps.cache-keys.outputs.coverage-cache }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Generate cache keys
        id: cache-keys
        run: |
          # Node modules cache key based on lock file and Node version
          echo "node-cache=node-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('.nvmrc') }}" >> $GITHUB_OUTPUT

          # Test results cache key based on test files and source code
          TEST_FILES_HASH=$(find tests -type f -name "*.ts" -o -name "*.tsx" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          SRC_FILES_HASH=$(find src server -type f -name "*.ts" -o -name "*.tsx" | sort | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "test-cache=tests-${{ runner.os }}-${TEST_FILES_HASH:0:16}-${SRC_FILES_HASH:0:16}" >> $GITHUB_OUTPUT

          # Coverage cache key
          echo "coverage-cache=coverage-${{ runner.os }}-${{ github.sha }}" >> $GITHUB_OUTPUT

  # Quality checks with dependency caching
  quality:
    name: 🔍 Code Quality
    needs: compute-cache-keys
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters
      NODE_ENV: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: 💾 Cache node_modules
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.compute-cache-keys.outputs.node-cache-key }}
          restore-keys: |
            node-${{ runner.os }}-

      - name: 📥 Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 💅 Check formatting
        run: npm run format:check

      - name: 🔧 Type check
        run: npm run typecheck

  # Unit tests with test result caching
  unit-tests:
    name: 🧪 Unit Tests
    needs: compute-cache-keys
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters
      NODE_ENV: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: 💾 Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.compute-cache-keys.outputs.node-cache-key }}
          restore-keys: |
            node-${{ runner.os }}-

      - name: 💾 Cache test results
        id: test-cache
        uses: actions/cache@v4
        with:
          path: |
            .vitest-cache
            test-results/unit-tests.json
          key: unit-${{ needs.compute-cache-keys.outputs.test-cache-key }}

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: |
          npm run ci-db-setup
          npm run verify-db-setup

      - name: 🧪 Run unit tests
        if: steps.test-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p test-results
          npm run test:coverage:unit:ci -- --reporter=json --outputFile=test-results/unit-tests.json
        continue-on-error: true

      - name: 📊 Use cached test results
        if: steps.test-cache.outputs.cache-hit == 'true'
        run: |
          echo "✅ Using cached test results"
          cat test-results/unit-tests.json | jq '.testResults[].status' | sort | uniq -c

      - name: 💾 Cache coverage data
        uses: actions/cache@v4
        with:
          path: |
            coverage/
            coverage-reports/
          key: ${{ needs.compute-cache-keys.outputs.coverage-cache-key }}-unit

      - name: 📊 Upload coverage
        if: steps.test-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: coverage/

      - name: 🧹 Cleanup
        if: always()
        run: npm run ci-db-teardown

  # Integration tests with caching
  integration-tests:
    name: 🔗 Integration Tests
    needs: compute-cache-keys
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters
      NODE_ENV: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: 💾 Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.compute-cache-keys.outputs.node-cache-key }}
          restore-keys: |
            node-${{ runner.os }}-

      - name: 💾 Cache test results
        id: test-cache
        uses: actions/cache@v4
        with:
          path: |
            test-results/integration-tests.json
            .jest-cache
          key: integration-${{ needs.compute-cache-keys.outputs.test-cache-key }}

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: |
          npm run ci-db-setup
          npm run verify-db-setup

      - name: 🔗 Run integration tests
        if: steps.test-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p test-results
          npm run test:coverage:integration:ci -- --json --outputFile=test-results/integration-tests.json
        continue-on-error: true

      - name: 📊 Use cached test results
        if: steps.test-cache.outputs.cache-hit == 'true'
        run: |
          echo "✅ Using cached integration test results"
          cat test-results/integration-tests.json | jq '.numPassedTests, .numFailedTests'

      - name: 💾 Cache coverage data
        uses: actions/cache@v4
        with:
          path: |
            coverage-integration/
          key: ${{ needs.compute-cache-keys.outputs.coverage-cache-key }}-integration

      - name: 🧹 Cleanup
        if: always()
        run: npm run ci-db-teardown

  # E2E tests with browser caching
  e2e-tests:
    name: 🌐 E2E Tests
    needs: compute-cache-keys
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters
      NODE_ENV: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: 💾 Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.compute-cache-keys.outputs.node-cache-key }}
          restore-keys: |
            node-${{ runner.os }}-

      - name: 💾 Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: 💾 Cache E2E test results
        id: test-cache
        uses: actions/cache@v4
        with:
          path: |
            test-results/
            playwright-report/
            .playwright-cache/
          key: e2e-${{ needs.compute-cache-keys.outputs.test-cache-key }}

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: 🗄️ Setup database
        run: |
          npm run ci-db-setup
          npm run verify-db-setup

      - name: 🏗️ Build application for E2E tests
        if: steps.test-cache.outputs.cache-hit != 'true'
        run: |
          echo "Building application for E2E testing..."
          npm run build
          echo "Build completed successfully!"

      - name: 🌐 Run E2E tests
        if: steps.test-cache.outputs.cache-hit != 'true'
        run: npm run test:e2e:ci

      - name: 📊 Use cached E2E results
        if: steps.test-cache.outputs.cache-hit == 'true'
        run: |
          echo "✅ Using cached E2E test results"
          if [ -f "test-results/.last-run.json" ]; then
            cat test-results/.last-run.json | jq '.status'
          fi

      - name: 📸 Upload test artifacts
        if: failure() && steps.test-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: e2e-artifacts
          path: |
            test-results/
            playwright-report/

      - name: 🧹 Cleanup
        if: always()
        run: npm run ci-db-teardown

  # Test result aggregation
  aggregate-results:
    name: 📊 Aggregate Test Results
    needs: [unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts/

      - name: 📊 Generate summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check cache hit rates
          echo "### 💾 Cache Performance" >> $GITHUB_STEP_SUMMARY
          echo "- Node modules: Cached" >> $GITHUB_STEP_SUMMARY
          echo "- Test results: Check individual job outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test statistics
          echo "### 📈 Test Statistics" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Cache Hit |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ✅ | Check logs |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ✅ | Check logs |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ✅ | Check logs |" >> $GITHUB_STEP_SUMMARY
