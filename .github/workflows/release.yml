name: 🚀 Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          # Handle npm optional dependencies issue in CI
          npm ci --prefer-offline --no-audit --no-fund
          # Force install rollup platform dependencies for CI
          npm install @rollup/rollup-linux-x64-gnu --save-optional --ignore-scripts || true

      - name: 🔍 Run quality checks
        run: |
          npm run lint
          npm run typecheck
          npm run format:check

      - name: 🧪 Run tests
        run: npm run test:coverage:ci

  build-and-package:
    name: 🏗️ Build and Package
    runs-on: ubuntu-latest
    needs: validate-release
    timeout-minutes: 20
    env:
      DATABASE_URL: file:./prisma/test.db
      JWT_SECRET: test-secret-key-for-ci-environment-must-be-longer-than-32-characters

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          # Handle npm optional dependencies issue in CI
          npm ci --prefer-offline --no-audit --no-fund
          # Force install rollup platform dependencies for CI
          npm install @rollup/rollup-linux-x64-gnu --save-optional --ignore-scripts || true

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Create release package
        run: |
          mkdir -p release-package
          cp -r dist/ release-package/
          cp -r prisma/ release-package/
          cp package.json package-lock.json release-package/
          cp README.md CHANGELOG.md release-package/

          # Create deployment scripts
          cat > release-package/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          echo "🚀 Deploying Running Tracker MVP ${{ needs.validate-release.outputs.version }}"
          npm ci --production
          npx prisma migrate deploy
          npx prisma generate
          echo "✅ Deployment complete"
          EOF
          chmod +x release-package/deploy.sh

          # Package everything
          tar -czf running-tracker-${{ needs.validate-release.outputs.version }}.tar.gz -C release-package .

      - name: 📊 Generate build report
        run: |
          echo "# 🏗️ Build Report" > build-report.md
          echo "" >> build-report.md
          echo "## 📊 Bundle Size" >> build-report.md
          du -sh dist/ >> build-report.md
          echo "" >> build-report.md
          echo "## 📁 Assets" >> build-report.md
          ls -la dist/ >> build-report.md
          echo "" >> build-report.md
          echo "Built on: $(date)" >> build-report.md

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: running-tracker-${{ needs.validate-release.outputs.version }}.tar.gz
          retention-days: 90

      - name: 📊 Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md
          retention-days: 30

  create-release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-package]
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download release package
        uses: actions/download-artifact@v4
        with:
          name: release-package

      - name: 📥 Download build report
        uses: actions/download-artifact@v4
        with:
          name: build-report

      - name: 📝 Generate release notes
        id: release-notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          # Generate changelog
          echo "# 🚀 Release ${{ needs.validate-release.outputs.version }}" > release-notes.md
          echo "" >> release-notes.md

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## 📋 Changes since $PREVIOUS_TAG" >> release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release-notes.md
          else
            echo "## 📋 Initial Release" >> release-notes.md
            echo "" >> release-notes.md
            echo "- Initial release of Running Tracker MVP" >> release-notes.md
          fi

          echo "" >> release-notes.md
          echo "## 🏗️ Build Information" >> release-notes.md
          cat build-report.md >> release-notes.md

          # Set output for GitHub release
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Running Tracker MVP ${{ needs.validate-release.outputs.version }}
          body: ${{ steps.release-notes.outputs.notes }}
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
          files: |
            running-tracker-${{ needs.validate-release.outputs.version }}.tar.gz
            build-report.md
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: 📢 Post-Release Actions
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success()
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏷️ Update version badges
        run: |
          echo "Updating version badges and documentation..."
          # This would typically update badges in README.md or other docs
          echo "Version ${{ needs.validate-release.outputs.version }} released successfully"

      - name: 📧 Notify release
        if: needs.validate-release.outputs.is-prerelease == 'false'
        run: |
          echo "🎉 Production release ${{ needs.validate-release.outputs.version }} completed!"
          echo "Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"

      - name: 🔄 Trigger deployment
        if: needs.validate-release.outputs.is-prerelease == 'false'
        run: |
          echo "🚀 Triggering deployment pipeline for production release..."
          # This would typically trigger deployment to production environment
