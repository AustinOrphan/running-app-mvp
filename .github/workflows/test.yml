name: 🧪 Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  # Lint and Type Check
  lint-and-typecheck:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint --if-present

      - name: 🔧 Type check
        run: npm run typecheck --if-present

  # Infrastructure Tests
  infrastructure-tests:
    name: 🏗️ Infrastructure Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Run infrastructure startup tests
        run: npm run test:infrastructure

      - name: 📊 Upload infrastructure test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-test-results
          path: |
            test-results/
          retention-days: 7

  # Unit Tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests with coverage
        run: npm run test:coverage

      - name: 📊 Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests
          fail_ci_if_error: false

      - name: 📊 Upload unit test coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-report
          path: coverage/
          retention-days: 30

  # Integration Tests
  integration-tests:
    name: 🔧 Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: running_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/running_app_test
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: 🔧 Run integration tests with coverage
        run: npm run test:coverage:integration

      - name: 📊 Upload integration test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-integration/lcov.info
          flags: integration
          name: integration-tests
          fail_ci_if_error: false

      - name: 📊 Upload integration test coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage-report
          path: coverage-integration/
          retention-days: 30

  # E2E Tests
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: running_app_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/running_app_e2e
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: 🔧 Build application
        run: npm run build

      - name: 🎭 Run E2E tests
        run: npm run test:e2e

      - name: 📊 Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Coverage Analysis
  coverage-analysis:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📥 Download unit coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-coverage-report
          path: coverage/

      - name: 📥 Download integration coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-coverage-report
          path: coverage-integration/

      - name: 📊 Generate coverage report
        run: npm run test:coverage:report

      - name: 🎯 Check coverage quality
        run: npm run test:coverage:quality

      - name: ✅ Verify coverage thresholds
        run: npm run test:coverage:check

      - name: 🏷️ Generate coverage badges
        run: npm run test:coverage:badges

      - name: 📊 Upload combined coverage report
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-report
          path: |
            coverage/
            coverage-integration/
            tests/coverage/badges/
          retention-days: 30

  # Accessibility Tests
  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: running_app_a11y_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/running_app_a11y_test
      JWT_SECRET: test-secret-key

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: 🗄️ Setup database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: ♿ Run unit accessibility tests
        run: npm run test:a11y

      - name: 🏗️ Build application
        run: npm run build

      - name: ♿ Run E2E accessibility tests
        run: npm run test:a11y:e2e

      - name: 📊 Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 14

      - name: ♿ Generate accessibility report
        if: always()
        run: |
          echo "## ♿ Accessibility Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "test-results/accessibility-summary.json" ]; then
            echo "✅ Accessibility tests completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Accessibility tests failed or incomplete" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Test Coverage:**" >> $GITHUB_STEP_SUMMARY
          echo "- Unit accessibility tests: Components and hooks" >> $GITHUB_STEP_SUMMARY
          echo "- E2E accessibility tests: Full user workflows" >> $GITHUB_STEP_SUMMARY
          echo "- WCAG 2.1 AA compliance verification" >> $GITHUB_STEP_SUMMARY
          echo "- Keyboard navigation testing" >> $GITHUB_STEP_SUMMARY
          echo "- Screen reader compatibility" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile accessibility testing" >> $GITHUB_STEP_SUMMARY

  # Security Audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔒 Run security audit
        run: npm audit --audit-level moderate

      - name: 🔍 Check for known vulnerabilities
        run: npm audit --audit-level high --production

  # Build Verification
  build-verification:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Test Matrix (Multiple Node Versions)
  test-matrix:
    name: 🧪 Test Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['20.x', '22.x']
        exclude:
          # Exclude some combinations to save CI time
          - os: windows-latest
            node-version: '20.x'
          - os: macos-latest
            node-version: '20.x'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:run

      - name: 🏗️ Build verification
        run: npm run build

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Dependency Review
  dependency-review:
    name: 🔍 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Review dependencies
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # Test Summary
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        lint-and-typecheck,
        infrastructure-tests,
        unit-tests,
        integration-tests,
        e2e-tests,
        coverage-analysis,
        security-audit,
        build-verification,
      ]
    if: always()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Generate test summary
        run: |
          echo "## 🧪 Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status | " >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint-and-typecheck.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Tests | ${{ needs.infrastructure-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Analysis | ${{ needs.coverage-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Verification | ${{ needs.build-verification.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: 🎉 All tests passed
        if: needs.lint-and-typecheck.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.coverage-analysis.result == 'success'
        run: |
          echo "🎉 All tests passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY

      - name: ❌ Some tests failed
        if: needs.lint-and-typecheck.result != 'success' || needs.unit-tests.result != 'success' || needs.integration-tests.result != 'success' || needs.e2e-tests.result != 'success' || needs.coverage-analysis.result != 'success'
        run: |
          echo "❌ Some tests failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
          exit 1
