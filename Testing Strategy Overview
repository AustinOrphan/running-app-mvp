  Testing Strategy Overview

  1. Testing Stack Setup

  # Frontend Testing
  npm install --save-dev vitest @testing-library/react @testing-library/jest-dom @testing-library/user-event jsdom

  # Backend Testing
  npm install --save-dev jest supertest @types/jest @types/supertest

  # E2E Testing
  npm install --save-dev playwright @playwright/test

  # Test Database
  npm install --save-dev @prisma/client sqlite3

  2. Test Architecture

  tests/
  ├── unit/
  │   ├── components/
  │   │   ├── Stats/
  │   │   │   ├── InsightsCard.test.tsx
  │   │   │   ├── TrendsChart.test.tsx
  │   │   │   ├── PersonalRecordsTable.test.tsx
  │   │   │   └── RunTypeBreakdownChart.test.tsx
  │   │   ├── Auth/
  │   │   └── Navigation/
  │   ├── hooks/
  │   │   ├── useStats.test.ts
  │   │   ├── useAuth.test.ts
  │   │   └── useRuns.test.ts
  │   ├── utils/
  │   │   └── formatters.test.ts
  │   └── pages/
  │       └── StatsPage.test.tsx
  ├── integration/
  │   ├── api/
  │   │   ├── auth.test.ts
  │   │   ├── runs.test.ts
  │   │   └── stats.test.ts
  │   └── database/
  │       └── prisma.test.ts
  ├── e2e/
  │   ├── auth-flow.spec.ts
  │   ├── runs-management.spec.ts
  │   ├── statistics-dashboard.spec.ts
  │   └── mobile-responsiveness.spec.ts
  ├── fixtures/
  │   ├── mockData.ts
  │   └── testDatabase.ts
  └── setup/
      ├── testSetup.ts
      └── mockServer.ts

  3. Specific Test Examples

  A. Unit Tests for Statistics Components

  // tests/unit/components/Stats/TrendsChart.test.tsx
  import { render, screen, fireEvent } from '@testing-library/react';
  import { TrendsChart } from '../../../../src/components/Stats/TrendsChart';
  import { mockTrendsData } from '../../../fixtures/mockData';

  describe('TrendsChart', () => {
    it('renders loading state correctly', () => {
      render(<TrendsChart data={[]} loading={true} />);
      expect(screen.getByText('Running Trends')).toBeInTheDocument();
      expect(screen.getByTestId('skeleton-chart')).toBeInTheDocument();
    });

    it('renders empty state when no data', () => {
      render(<TrendsChart data={[]} loading={false} />);
      expect(screen.getByText('Not enough data for trends')).toBeInTheDocument();
    });

    it('switches between distance and pace metrics', () => {
      render(<TrendsChart data={mockTrendsData} loading={false} />);

      const selector = screen.getByRole('combobox');
      fireEvent.change(selector, { target: { value: 'pace' } });

      expect(selector.value).toBe('pace');
      expect(screen.getByText('Pace (min/km)')).toBeInTheDocument();
    });

    it('displays summary statistics correctly', () => {
      render(<TrendsChart data={mockTrendsData} loading={false} />);

      expect(screen.getByText('Total weeks: 12')).toBeInTheDocument();
      expect(screen.getByText('Best week: 25.5km')).toBeInTheDocument();
    });
  });

  B. API Integration Tests

  // tests/integration/api/stats.test.ts
  import request from 'supertest';
  import { app } from '../../../server';
  import { createTestUser, createTestRuns } from '../../fixtures/testDatabase';

  describe('Stats API', () => {
    let authToken: string;
    let userId: string;

    beforeEach(async () => {
      const testUser = await createTestUser();
      userId = testUser.id;
      authToken = generateTestToken(userId);
      await createTestRuns(userId, mockRunsData);
    });

    describe('GET /api/stats/trends', () => {
      it('returns weekly trends data', async () => {
        const response = await request(app)
          .get('/api/stats/trends?period=3m')
          .set('Authorization', `Bearer ${authToken}`)
          .expect(200);

        expect(response.body).toHaveLength(12);
        expect(response.body[0]).toHaveProperty('date');
        expect(response.body[0]).toHaveProperty('distance');
        expect(response.body[0]).toHaveProperty('pace');
      });

      it('filters by time period correctly', async () => {
        const response = await request(app)
          .get('/api/stats/trends?period=1m')
          .set('Authorization', `Bearer ${authToken}`)
          .expect(200);

        expect(response.body).toHaveLength(4);
      });

      it('requires authentication', async () => {
        await request(app)
          .get('/api/stats/trends')
          .expect(401);
      });
    });

    describe('GET /api/stats/personal-records', () => {
      it('returns personal records for standard distances', async () => {
        const response = await request(app)
          .get('/api/stats/personal-records')
          .set('Authorization', `Bearer ${authToken}`)
          .expect(200);

        expect(response.body).toEqual(
          expect.arrayContaining([
            expect.objectContaining({
              distance: 5,
              bestTime: expect.any(Number),
              bestPace: expect.any(Number),
              date: expect.any(String),
              runId: expect.any(String)
            })
          ])
        );
      });
    });
  });

  C. E2E Tests

  // tests/e2e/statistics-dashboard.spec.ts
  import { test, expect } from '@playwright/test';

  test.describe('Statistics Dashboard', () => {
    test.beforeEach(async ({ page }) => {
      await page.goto('/');
      await page.fill('input[type="email"]', 'test@example.com');
      await page.fill('input[type="password"]', 'password123');
      await page.click('button[type="submit"]');
      await page.click('text=Stats');
    });

    test('displays all statistics components', async ({ page }) => {
      await expect(page.locator('h2')).toContainText('Statistics');
      await expect(page.locator('.insights-card')).toBeVisible();
      await expect(page.locator('.chart-card')).toBeVisible();
      await expect(page.locator('.trends-chart-card')).toBeVisible();
      await expect(page.locator('.records-table-card')).toBeVisible();
    });

    test('trends chart metric selector works', async ({ page }) => {
      await page.selectOption('.metric-selector', 'pace');
      await expect(page.locator('text=Pace (min/km)')).toBeVisible();
    });

    test('personal records table sorting works', async ({ page }) => {
      await page.click('th:has-text("Distance")');

      const firstRow = page.locator('tbody tr').first();
      await expect(firstRow.locator('.distance-value')).toContainText('1K');
    });

    test('mobile responsiveness', async ({ page }) => {
      await page.setViewportSize({ width: 375, height: 667 });

      await expect(page.locator('.insights-grid')).toHaveCSS('grid-template-columns', 'repeat(2, 1fr)');
      await expect(page.locator('.records-table')).toHaveCSS('min-width', '280px');
    });
  });

  4. Test Configuration Files

  Vitest Config (vitest.config.ts)

  import { defineConfig } from 'vitest/config';
  import react from '@vitejs/plugin-react';

  export default defineConfig({
    plugins: [react()],
    test: {
      globals: true,
      environment: 'jsdom',
      setupFiles: ['./tests/setup/testSetup.ts'],
      coverage: {
        provider: 'v8',
        reporter: ['text', 'json', 'html'],
        thresholds: {
          global: {
            branches: 80,
            functions: 80,
            lines: 80,
            statements: 80
          }
        }
      }
    }
  });

  Jest Config for Backend (jest.config.js)

  module.exports = {
    preset: 'ts-jest',
    testEnvironment: 'node',
    setupFilesAfterEnv: ['<rootDir>/tests/setup/testSetup.ts'],
    testMatch: ['**/tests/integration/**/*.test.ts'],
    collectCoverageFrom: [
      'routes/**/*.ts',
      'middleware/**/*.ts',
      'utils/**/*.ts'
    ]
  };

  Playwright Config

  import { defineConfig } from '@playwright/test';

  export default defineConfig({
    testDir: './tests/e2e',
    timeout: 30000,
    retries: 2,
    use: {
      baseURL: 'http://localhost:3001',
      headless: true,
      screenshot: 'only-on-failure',
      video: 'retain-on-failure'
    },
    projects: [
      { name: 'chromium', use: { ...devices['Desktop Chrome'] } },
      { name: 'webkit', use: { ...devices['Desktop Safari'] } },
      { name: 'mobile', use: { ...devices['iPhone 13'] } }
    ]
  });

  5. Package.json Scripts

  {
    "scripts": {
      "test": "vitest",
      "test:ui": "vitest --ui",
      "test:coverage": "vitest run --coverage",
      "test:integration": "jest --config jest.config.js",
      "test:e2e": "playwright test",
      "test:e2e:ui": "playwright test --ui",
      "test:all": "npm run test:coverage && npm run test:integration && npm run test:e2e"
    }
  }

  6. CI/CD Pipeline (.github/workflows/test.yml)

  name: Test Suite
  on: [push, pull_request]

  jobs:
    unit-tests:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: '18'
        - run: npm ci
        - run: npm run test:coverage

    integration-tests:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
        - run: npm ci
        - run: npm run test:integration

    e2e-tests:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
        - run: npm ci
        - run: npx playwright install
        - run: npm run test:e2e

  Implementation Priority

  1. Phase 1: Unit tests for critical components (Stats, Auth)
  2. Phase 2: API integration tests
  3. Phase 3: E2E tests for main user flows
  4. Phase 4: Performance and accessibility tests
  5. Phase 5: Visual regression tests