generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  runs  Run[]
  goals Goal[]
  races Race[]
  trainingPlans TrainingPlan[]
  runAnalytics RunAnalytics[]
  locationHeatmaps LocationHeatmap[]
  runTendencies RunTendency[]
}

model Run {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime
  distance  Float
  duration  Int
  tag       String?
  notes     String?
  routeGeoJson String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  detail RunDetail?
  workoutTemplates WorkoutTemplate[]
  
  @@index([userId])
  @@index([date])
}

model Goal {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  
  // Goal type and target configuration
  type        String   // "DISTANCE", "TIME", "FREQUENCY", "PACE", "LONGEST_RUN"
  period      String   // "WEEKLY", "MONTHLY", "YEARLY", "CUSTOM"
  targetValue Float
  targetUnit  String   // "km", "minutes", "runs", "min/km"
  
  // Time period
  startDate   DateTime
  endDate     DateTime
  
  // Progress tracking
  currentValue Float    @default(0)
  isCompleted  Boolean  @default(false)
  completedAt  DateTime?
  
  // Metadata
  color       String?  // Hex color for UI visualization
  icon        String?  // Icon identifier
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([period])
  @@index([isActive])
}

// Goal types as constants (SQLite doesn't support enums)
// DISTANCE: Total distance goal (e.g., "Run 100km")
// TIME: Total time goal (e.g., "Run for 10 hours") 
// FREQUENCY: Frequency goal (e.g., "Run 4 times per week")
// PACE: Average pace goal (e.g., "Maintain 5:00 min/km pace")
// LONGEST_RUN: Longest single run goal (e.g., "Run 21km in one session")

// Goal periods as constants
// WEEKLY, MONTHLY, YEARLY, CUSTOM

model Race {
  id       String @id @default(uuid())
  userId   String
  name     String
  raceDate DateTime
  distance Float
  targetTime Int?
  actualTime Int?
  notes    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingPlans TrainingPlan[]
  
  @@index([userId])
  @@index([raceDate])
}

model RunDetail {
  id           String @id @default(uuid())
  runId        String @unique
  heartRate    Int?
  avgHeartRate Int?
  maxHeartRate Int?
  minHeartRate Int?
  elevation    Float?
  elevationGain Float?
  elevationLoss Float?
  weather      String?
  temperature  Float?
  humidity     Float?
  windSpeed    Float?
  effortLevel  Int?
  cadence      Int?
  avgCadence   Int?
  splits       String? // JSON string of pace splits
  gpsData      String? // JSON string of GPS coordinates
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  run Run @relation(fields: [runId], references: [id], onDelete: Cascade)
  
  @@index([runId])
}

model TrainingPlan {
  id                 String @id @default(uuid())
  userId             String
  name               String
  description        String?
  startDate          DateTime
  endDate            DateTime
  goal               String
  targetRaceId       String?
  isActive           Boolean @default(true)
  difficulty         String @default("intermediate") // beginner, intermediate, advanced
  weeklyMileageStart Float?
  weeklyMileageTarget Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetRace Race? @relation(fields: [targetRaceId], references: [id], onDelete: SetNull)
  workouts WorkoutTemplate[]
  
  @@index([userId])
  @@index([isActive])
}

model WorkoutTemplate {
  id             String @id @default(uuid())
  trainingPlanId String
  weekNumber     Int
  dayOfWeek      Int // 0-6, Sunday to Saturday
  type           String // easy, tempo, interval, long, recovery, race
  name           String
  description    String?
  targetDistance Float?
  targetDuration Int?
  targetPace     Float?
  intensity      String? // easy, moderate, hard, max
  notes          String?
  isCompleted    Boolean @default(false)
  completedRunId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  trainingPlan TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
  completedRun Run? @relation(fields: [completedRunId], references: [id], onDelete: SetNull)
  
  @@index([trainingPlanId])
  @@index([weekNumber])
}

model RunAnalytics {
  id                String @id @default(uuid())
  userId            String
  period            String // daily, weekly, monthly, yearly
  startDate         DateTime
  endDate           DateTime
  totalRuns         Int @default(0)
  totalDistance     Float @default(0)
  totalDuration     Int @default(0)
  avgPace           Float?
  avgDistance       Float?
  avgHeartRate      Int?
  totalElevationGain Float?
  caloriesBurned    Int?
  trends            String? // JSON string of trend data
  insights          String? // JSON string of insights
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([period])
  @@index([startDate])
  @@unique([userId, period, startDate])
}

model LocationHeatmap {
  id            String @id @default(uuid())
  userId        String
  latitude      Float
  longitude     Float
  frequency     Int @default(1)
  lastVisited   DateTime @default(now())
  totalDistance Float @default(0)
  avgPace       Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([latitude, longitude])
  @@unique([userId, latitude, longitude])
}

model RunTendency {
  id             String @id @default(uuid())
  userId         String
  type           String // preferred_time, preferred_day, optimal_distance, recovery_pattern, etc.
  value          String
  confidence     Float // 0-1 confidence score
  sampleSize     Int
  lastCalculated DateTime @default(now())
  metadata       String? // JSON string of additional data
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
}